d9df5e909a4848393fc9055821e457cc
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _jestUtil = require('jest-util');
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var FRAMEWORK_INITIALIZER = require.resolve('./jestAdapterInit');

var jestAdapter = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(globalConfig, config, environment, runtime, testPath, sendMessageToJest) {
    var _runtime$requireInter, initialize, runAndTransformResultsToJestFormat, _yield$initialize, globals, snapshotState, _iterator, _step, path, _esm, esm, results;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _runtime$requireInter = runtime.requireInternalModule(FRAMEWORK_INITIALIZER), initialize = _runtime$requireInter.initialize, runAndTransformResultsToJestFormat = _runtime$requireInter.runAndTransformResultsToJestFormat;
            _context.next = 3;
            return initialize({
              config: config,
              environment: environment,
              globalConfig: globalConfig,
              localRequire: runtime.requireModule.bind(runtime),
              parentProcess: process,
              sendMessageToJest: sendMessageToJest,
              setGlobalsForRuntime: runtime.setGlobalsForRuntime.bind(runtime),
              testPath: testPath
            });

          case 3:
            _yield$initialize = _context.sent;
            globals = _yield$initialize.globals;
            snapshotState = _yield$initialize.snapshotState;

            if (config.timers === 'fake' || config.timers === 'modern') {
              // during setup, this cannot be null (and it's fine to explode if it is)
              environment.fakeTimersModern.useFakeTimers();
            } else if (config.timers === 'legacy') {
              environment.fakeTimers.useFakeTimers();
            }

            globals.beforeEach(function () {
              if (config.resetModules) {
                runtime.resetModules();
              }

              if (config.clearMocks) {
                runtime.clearAllMocks();
              }

              if (config.resetMocks) {
                runtime.resetAllMocks();

                if (config.timers === 'legacy') {
                  // during setup, this cannot be null (and it's fine to explode if it is)
                  environment.fakeTimers.useFakeTimers();
                }
              }

              if (config.restoreMocks) {
                runtime.restoreAllMocks();
              }
            });
            _iterator = _createForOfIteratorHelper(config.setupFilesAfterEnv);
            _context.prev = 9;

            _iterator.s();

          case 11:
            if ((_step = _iterator.n()).done) {
              _context.next = 22;
              break;
            }

            path = _step.value;
            _esm = runtime.unstable_shouldLoadAsEsm(path);

            if (!_esm) {
              _context.next = 19;
              break;
            }

            _context.next = 17;
            return runtime.unstable_importModule(path);

          case 17:
            _context.next = 20;
            break;

          case 19:
            runtime.requireModule(path);

          case 20:
            _context.next = 11;
            break;

          case 22:
            _context.next = 27;
            break;

          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](9);

            _iterator.e(_context.t0);

          case 27:
            _context.prev = 27;

            _iterator.f();

            return _context.finish(27);

          case 30:
            esm = runtime.unstable_shouldLoadAsEsm(testPath);

            if (!esm) {
              _context.next = 36;
              break;
            }

            _context.next = 34;
            return runtime.unstable_importModule(testPath);

          case 34:
            _context.next = 37;
            break;

          case 36:
            runtime.requireModule(testPath);

          case 37:
            _context.next = 39;
            return runAndTransformResultsToJestFormat({
              config: config,
              globalConfig: globalConfig,
              testPath: testPath
            });

          case 39:
            results = _context.sent;

            _addSnapshotData(results, snapshotState); // We need to copy the results object to ensure we don't leaks the prototypes
            // from the VM. Jasmine creates the result objects in the parent process, we
            // should consider doing that for circus as well.


            return _context.abrupt("return", (0, _jestUtil.deepCyclicCopy)(results, {
              keepPrototype: false
            }));

          case 42:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[9, 24, 27, 30]]);
  }));

  return function jestAdapter(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();

var _addSnapshotData = function _addSnapshotData(results, snapshotState) {
  results.testResults.forEach(function (_ref2) {
    var fullName = _ref2.fullName,
        status = _ref2.status;

    if (status === 'pending' || status === 'failed') {
      // if test is skipped or failed, we don't want to mark
      // its snapshots as obsolete.
      snapshotState.markSnapshotsAsCheckedForTest(fullName);
    }
  });
  var uncheckedCount = snapshotState.getUncheckedCount();
  var uncheckedKeys = snapshotState.getUncheckedKeys();

  if (uncheckedCount) {
    snapshotState.removeUncheckedKeys();
  }

  var status = snapshotState.save();
  results.snapshot.fileDeleted = status.deleted;
  results.snapshot.added = snapshotState.added;
  results.snapshot.matched = snapshotState.matched;
  results.snapshot.unmatched = snapshotState.unmatched;
  results.snapshot.updated = snapshotState.updated;
  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0; // Copy the array to prevent memory leaks

  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);
};

module.exports = jestAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,