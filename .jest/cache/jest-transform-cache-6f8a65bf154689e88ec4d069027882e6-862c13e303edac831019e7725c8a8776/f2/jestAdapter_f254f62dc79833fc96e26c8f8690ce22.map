{"version":3,"sources":["jestAdapter.js"],"names":["_jestUtil","require","FRAMEWORK_INITIALIZER","resolve","jestAdapter","globalConfig","config","environment","runtime","testPath","sendMessageToJest","requireInternalModule","initialize","runAndTransformResultsToJestFormat","localRequire","requireModule","bind","parentProcess","process","setGlobalsForRuntime","globals","snapshotState","timers","fakeTimersModern","useFakeTimers","fakeTimers","beforeEach","resetModules","clearMocks","clearAllMocks","resetMocks","resetAllMocks","restoreMocks","restoreAllMocks","setupFilesAfterEnv","path","esm","unstable_shouldLoadAsEsm","unstable_importModule","results","_addSnapshotData","deepCyclicCopy","keepPrototype","testResults","forEach","fullName","status","markSnapshotsAsCheckedForTest","uncheckedCount","getUncheckedCount","uncheckedKeys","getUncheckedKeys","removeUncheckedKeys","save","snapshot","fileDeleted","deleted","added","matched","unmatched","updated","unchecked","Array","from","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _jestUtil = require('jest-util');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst FRAMEWORK_INITIALIZER = require.resolve('./jestAdapterInit');\n\nconst jestAdapter = async (\n  globalConfig,\n  config,\n  environment,\n  runtime,\n  testPath,\n  sendMessageToJest\n) => {\n  const {initialize, runAndTransformResultsToJestFormat} =\n    runtime.requireInternalModule(FRAMEWORK_INITIALIZER);\n  const {globals, snapshotState} = await initialize({\n    config,\n    environment,\n    globalConfig,\n    localRequire: runtime.requireModule.bind(runtime),\n    parentProcess: process,\n    sendMessageToJest,\n    setGlobalsForRuntime: runtime.setGlobalsForRuntime.bind(runtime),\n    testPath\n  });\n\n  if (config.timers === 'fake' || config.timers === 'modern') {\n    // during setup, this cannot be null (and it's fine to explode if it is)\n    environment.fakeTimersModern.useFakeTimers();\n  } else if (config.timers === 'legacy') {\n    environment.fakeTimers.useFakeTimers();\n  }\n\n  globals.beforeEach(() => {\n    if (config.resetModules) {\n      runtime.resetModules();\n    }\n\n    if (config.clearMocks) {\n      runtime.clearAllMocks();\n    }\n\n    if (config.resetMocks) {\n      runtime.resetAllMocks();\n\n      if (config.timers === 'legacy') {\n        // during setup, this cannot be null (and it's fine to explode if it is)\n        environment.fakeTimers.useFakeTimers();\n      }\n    }\n\n    if (config.restoreMocks) {\n      runtime.restoreAllMocks();\n    }\n  });\n\n  for (const path of config.setupFilesAfterEnv) {\n    const esm = runtime.unstable_shouldLoadAsEsm(path);\n\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      runtime.requireModule(path);\n    }\n  }\n\n  const esm = runtime.unstable_shouldLoadAsEsm(testPath);\n\n  if (esm) {\n    await runtime.unstable_importModule(testPath);\n  } else {\n    runtime.requireModule(testPath);\n  }\n\n  const results = await runAndTransformResultsToJestFormat({\n    config,\n    globalConfig,\n    testPath\n  });\n\n  _addSnapshotData(results, snapshotState); // We need to copy the results object to ensure we don't leaks the prototypes\n  // from the VM. Jasmine creates the result objects in the parent process, we\n  // should consider doing that for circus as well.\n\n  return (0, _jestUtil.deepCyclicCopy)(results, {\n    keepPrototype: false\n  });\n};\n\nconst _addSnapshotData = (results, snapshotState) => {\n  results.testResults.forEach(({fullName, status}) => {\n    if (status === 'pending' || status === 'failed') {\n      // if test is skipped or failed, we don't want to mark\n      // its snapshots as obsolete.\n      snapshotState.markSnapshotsAsCheckedForTest(fullName);\n    }\n  });\n  const uncheckedCount = snapshotState.getUncheckedCount();\n  const uncheckedKeys = snapshotState.getUncheckedKeys();\n\n  if (uncheckedCount) {\n    snapshotState.removeUncheckedKeys();\n  }\n\n  const status = snapshotState.save();\n  results.snapshot.fileDeleted = status.deleted;\n  results.snapshot.added = snapshotState.added;\n  results.snapshot.matched = snapshotState.matched;\n  results.snapshot.unmatched = snapshotState.unmatched;\n  results.snapshot.updated = snapshotState.updated;\n  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0; // Copy the array to prevent memory leaks\n\n  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);\n};\n\nmodule.exports = jestAdapter;\n"]}