b5bd522cbfbf1fb9a5c6740a32c19cb3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var vendors = require('./vendors.json');

var env = process.env; // Used for testing only

Object.defineProperty(exports, '_vendors', {
  value: vendors.map(function (v) {
    return v.constant;
  })
});
exports.name = null;
exports.isPR = null;
vendors.forEach(function (vendor) {
  var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
  var isCI = envs.every(function (obj) {
    return checkEnv(obj);
  });
  exports[vendor.constant] = isCI;

  if (isCI) {
    exports.name = vendor.name;

    switch ((0, _typeof2["default"])(vendor.pr)) {
      case 'string':
        // "pr": "CIRRUS_PR"
        exports.isPR = !!env[vendor.pr];
        break;

      case 'object':
        if ('env' in vendor.pr) {
          // "pr": { "env": "BUILDKITE_PULL_REQUEST", "ne": "false" }
          exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
        } else if ('any' in vendor.pr) {
          // "pr": { "any": ["ghprbPullId", "CHANGE_ID"] }
          exports.isPR = vendor.pr.any.some(function (key) {
            return !!env[key];
          });
        } else {
          // "pr": { "DRONE_BUILD_EVENT": "pull_request" }
          exports.isPR = checkEnv(vendor.pr);
        }

        break;

      default:
        // PR detection not supported for this vendor
        exports.isPR = null;
    }
  }
});
exports.isCI = !!(env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari
env.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI
env.BUILD_NUMBER || // Jenkins, TeamCity
env.RUN_ID || // TaskCluster, dsari
exports.name || false);

function checkEnv(obj) {
  if (typeof obj === 'string') return !!env[obj];
  return Object.keys(obj).every(function (k) {
    return env[k] === obj[k];
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInZlbmRvcnMiLCJyZXF1aXJlIiwiZW52IiwicHJvY2VzcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWFwIiwidiIsImNvbnN0YW50IiwibmFtZSIsImlzUFIiLCJmb3JFYWNoIiwidmVuZG9yIiwiZW52cyIsIkFycmF5IiwiaXNBcnJheSIsImlzQ0kiLCJldmVyeSIsIm9iaiIsImNoZWNrRW52IiwicHIiLCJuZSIsImFueSIsInNvbWUiLCJrZXkiLCJDSSIsIkNPTlRJTlVPVVNfSU5URUdSQVRJT04iLCJCVUlMRF9OVU1CRVIiLCJSVU5fSUQiLCJrZXlzIiwiayJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQXZCOztBQUVBLElBQU1DLEdBQUcsR0FBR0MsT0FBTyxDQUFDRCxHQUFwQixDLENBRUE7O0FBQ0FFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsVUFBL0IsRUFBMkM7QUFDekNDLEVBQUFBLEtBQUssRUFBRVAsT0FBTyxDQUFDUSxHQUFSLENBQVksVUFBVUMsQ0FBVixFQUFhO0FBQUUsV0FBT0EsQ0FBQyxDQUFDQyxRQUFUO0FBQW1CLEdBQTlDO0FBRGtDLENBQTNDO0FBSUFKLE9BQU8sQ0FBQ0ssSUFBUixHQUFlLElBQWY7QUFDQUwsT0FBTyxDQUFDTSxJQUFSLEdBQWUsSUFBZjtBQUVBWixPQUFPLENBQUNhLE9BQVIsQ0FBZ0IsVUFBVUMsTUFBVixFQUFrQjtBQUNoQyxNQUFNQyxJQUFJLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxNQUFNLENBQUNaLEdBQXJCLElBQTRCWSxNQUFNLENBQUNaLEdBQW5DLEdBQXlDLENBQUNZLE1BQU0sQ0FBQ1osR0FBUixDQUF0RDtBQUNBLE1BQU1nQixJQUFJLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxDQUFXLFVBQVVDLEdBQVYsRUFBZTtBQUNyQyxXQUFPQyxRQUFRLENBQUNELEdBQUQsQ0FBZjtBQUNELEdBRlksQ0FBYjtBQUlBZCxFQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0osUUFBUixDQUFQLEdBQTJCUSxJQUEzQjs7QUFFQSxNQUFJQSxJQUFKLEVBQVU7QUFDUlosSUFBQUEsT0FBTyxDQUFDSyxJQUFSLEdBQWVHLE1BQU0sQ0FBQ0gsSUFBdEI7O0FBRUEscUNBQWVHLE1BQU0sQ0FBQ1EsRUFBdEI7QUFDRSxXQUFLLFFBQUw7QUFDRTtBQUNBaEIsUUFBQUEsT0FBTyxDQUFDTSxJQUFSLEdBQWUsQ0FBQyxDQUFDVixHQUFHLENBQUNZLE1BQU0sQ0FBQ1EsRUFBUixDQUFwQjtBQUNBOztBQUNGLFdBQUssUUFBTDtBQUNFLFlBQUksU0FBU1IsTUFBTSxDQUFDUSxFQUFwQixFQUF3QjtBQUN0QjtBQUNBaEIsVUFBQUEsT0FBTyxDQUFDTSxJQUFSLEdBQWVFLE1BQU0sQ0FBQ1EsRUFBUCxDQUFVcEIsR0FBVixJQUFpQkEsR0FBakIsSUFBd0JBLEdBQUcsQ0FBQ1ksTUFBTSxDQUFDUSxFQUFQLENBQVVwQixHQUFYLENBQUgsS0FBdUJZLE1BQU0sQ0FBQ1EsRUFBUCxDQUFVQyxFQUF4RTtBQUNELFNBSEQsTUFHTyxJQUFJLFNBQVNULE1BQU0sQ0FBQ1EsRUFBcEIsRUFBd0I7QUFDN0I7QUFDQWhCLFVBQUFBLE9BQU8sQ0FBQ00sSUFBUixHQUFlRSxNQUFNLENBQUNRLEVBQVAsQ0FBVUUsR0FBVixDQUFjQyxJQUFkLENBQW1CLFVBQVVDLEdBQVYsRUFBZTtBQUMvQyxtQkFBTyxDQUFDLENBQUN4QixHQUFHLENBQUN3QixHQUFELENBQVo7QUFDRCxXQUZjLENBQWY7QUFHRCxTQUxNLE1BS0E7QUFDTDtBQUNBcEIsVUFBQUEsT0FBTyxDQUFDTSxJQUFSLEdBQWVTLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUSxFQUFSLENBQXZCO0FBQ0Q7O0FBQ0Q7O0FBQ0Y7QUFDRTtBQUNBaEIsUUFBQUEsT0FBTyxDQUFDTSxJQUFSLEdBQWUsSUFBZjtBQXJCSjtBQXVCRDtBQUNGLENBbkNEO0FBcUNBTixPQUFPLENBQUNZLElBQVIsR0FBZSxDQUFDLEVBQ2RoQixHQUFHLENBQUN5QixFQUFKLElBQVU7QUFDVnpCLEdBQUcsQ0FBQzBCLHNCQURKLElBQzhCO0FBQzlCMUIsR0FBRyxDQUFDMkIsWUFGSixJQUVvQjtBQUNwQjNCLEdBQUcsQ0FBQzRCLE1BSEosSUFHYztBQUNkeEIsT0FBTyxDQUFDSyxJQUpSLElBS0EsS0FOYyxDQUFoQjs7QUFTQSxTQUFTVSxRQUFULENBQW1CRCxHQUFuQixFQUF3QjtBQUN0QixNQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFuQixFQUE2QixPQUFPLENBQUMsQ0FBQ2xCLEdBQUcsQ0FBQ2tCLEdBQUQsQ0FBWjtBQUM3QixTQUFPaEIsTUFBTSxDQUFDMkIsSUFBUCxDQUFZWCxHQUFaLEVBQWlCRCxLQUFqQixDQUF1QixVQUFVYSxDQUFWLEVBQWE7QUFDekMsV0FBTzlCLEdBQUcsQ0FBQzhCLENBQUQsQ0FBSCxLQUFXWixHQUFHLENBQUNZLENBQUQsQ0FBckI7QUFDRCxHQUZNLENBQVA7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB2ZW5kb3JzID0gcmVxdWlyZSgnLi92ZW5kb3JzLmpzb24nKVxuXG5jb25zdCBlbnYgPSBwcm9jZXNzLmVudlxuXG4vLyBVc2VkIGZvciB0ZXN0aW5nIG9ubHlcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX3ZlbmRvcnMnLCB7XG4gIHZhbHVlOiB2ZW5kb3JzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi5jb25zdGFudCB9KVxufSlcblxuZXhwb3J0cy5uYW1lID0gbnVsbFxuZXhwb3J0cy5pc1BSID0gbnVsbFxuXG52ZW5kb3JzLmZvckVhY2goZnVuY3Rpb24gKHZlbmRvcikge1xuICBjb25zdCBlbnZzID0gQXJyYXkuaXNBcnJheSh2ZW5kb3IuZW52KSA/IHZlbmRvci5lbnYgOiBbdmVuZG9yLmVudl1cbiAgY29uc3QgaXNDSSA9IGVudnMuZXZlcnkoZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBjaGVja0VudihvYmopXG4gIH0pXG5cbiAgZXhwb3J0c1t2ZW5kb3IuY29uc3RhbnRdID0gaXNDSVxuXG4gIGlmIChpc0NJKSB7XG4gICAgZXhwb3J0cy5uYW1lID0gdmVuZG9yLm5hbWVcblxuICAgIHN3aXRjaCAodHlwZW9mIHZlbmRvci5wcikge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgLy8gXCJwclwiOiBcIkNJUlJVU19QUlwiXG4gICAgICAgIGV4cG9ydHMuaXNQUiA9ICEhZW52W3ZlbmRvci5wcl1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmICgnZW52JyBpbiB2ZW5kb3IucHIpIHtcbiAgICAgICAgICAvLyBcInByXCI6IHsgXCJlbnZcIjogXCJCVUlMREtJVEVfUFVMTF9SRVFVRVNUXCIsIFwibmVcIjogXCJmYWxzZVwiIH1cbiAgICAgICAgICBleHBvcnRzLmlzUFIgPSB2ZW5kb3IucHIuZW52IGluIGVudiAmJiBlbnZbdmVuZG9yLnByLmVudl0gIT09IHZlbmRvci5wci5uZVxuICAgICAgICB9IGVsc2UgaWYgKCdhbnknIGluIHZlbmRvci5wcikge1xuICAgICAgICAgIC8vIFwicHJcIjogeyBcImFueVwiOiBbXCJnaHByYlB1bGxJZFwiLCBcIkNIQU5HRV9JRFwiXSB9XG4gICAgICAgICAgZXhwb3J0cy5pc1BSID0gdmVuZG9yLnByLmFueS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWVudltrZXldXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBcInByXCI6IHsgXCJEUk9ORV9CVUlMRF9FVkVOVFwiOiBcInB1bGxfcmVxdWVzdFwiIH1cbiAgICAgICAgICBleHBvcnRzLmlzUFIgPSBjaGVja0Vudih2ZW5kb3IucHIpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIFBSIGRldGVjdGlvbiBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIHZlbmRvclxuICAgICAgICBleHBvcnRzLmlzUFIgPSBudWxsXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnRzLmlzQ0kgPSAhIShcbiAgZW52LkNJIHx8IC8vIFRyYXZpcyBDSSwgQ2lyY2xlQ0ksIENpcnJ1cyBDSSwgR2l0bGFiIENJLCBBcHB2ZXlvciwgQ29kZVNoaXAsIGRzYXJpXG4gIGVudi5DT05USU5VT1VTX0lOVEVHUkFUSU9OIHx8IC8vIFRyYXZpcyBDSSwgQ2lycnVzIENJXG4gIGVudi5CVUlMRF9OVU1CRVIgfHwgLy8gSmVua2lucywgVGVhbUNpdHlcbiAgZW52LlJVTl9JRCB8fCAvLyBUYXNrQ2x1c3RlciwgZHNhcmlcbiAgZXhwb3J0cy5uYW1lIHx8XG4gIGZhbHNlXG4pXG5cbmZ1bmN0aW9uIGNoZWNrRW52IChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSByZXR1cm4gISFlbnZbb2JqXVxuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5ldmVyeShmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBlbnZba10gPT09IG9ialtrXVxuICB9KVxufVxuIl19