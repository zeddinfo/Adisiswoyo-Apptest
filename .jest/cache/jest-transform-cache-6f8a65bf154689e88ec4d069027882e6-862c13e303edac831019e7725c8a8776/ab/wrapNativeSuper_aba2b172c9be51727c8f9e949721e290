0044f71e4de53160af82d9bada5013b2
"use strict";

var getPrototypeOf = require("./getPrototypeOf.js");

var setPrototypeOf = require("./setPrototypeOf.js");

var isNativeFunction = require("./isNativeFunction.js");

var construct = require("./construct.js");

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _wrapNativeSuper(Class);
}

module.exports = _wrapNativeSuper;
module.exports["default"] = module.exports, module.exports.__esModule = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyYXBOYXRpdmVTdXBlci5qcyJdLCJuYW1lcyI6WyJnZXRQcm90b3R5cGVPZiIsInJlcXVpcmUiLCJzZXRQcm90b3R5cGVPZiIsImlzTmF0aXZlRnVuY3Rpb24iLCJjb25zdHJ1Y3QiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiQ2xhc3MiLCJfY2FjaGUiLCJNYXAiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiVHlwZUVycm9yIiwiaGFzIiwiZ2V0Iiwic2V0IiwiV3JhcHBlciIsImFyZ3VtZW50cyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJfX2VzTW9kdWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGNBQWMsR0FBR0MsT0FBTyxDQUFDLHFCQUFELENBQTVCOztBQUVBLElBQUlDLGNBQWMsR0FBR0QsT0FBTyxDQUFDLHFCQUFELENBQTVCOztBQUVBLElBQUlFLGdCQUFnQixHQUFHRixPQUFPLENBQUMsdUJBQUQsQ0FBOUI7O0FBRUEsSUFBSUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBdkI7O0FBRUEsU0FBU0ksZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDO0FBQy9CLE1BQUlDLE1BQU0sR0FBRyxPQUFPQyxHQUFQLEtBQWUsVUFBZixHQUE0QixJQUFJQSxHQUFKLEVBQTVCLEdBQXdDQyxTQUFyRDs7QUFFQUMsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTixnQkFBZ0IsR0FBRyxTQUFTQSxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUM7QUFDbkUsUUFBSUEsS0FBSyxLQUFLLElBQVYsSUFBa0IsQ0FBQ0gsZ0JBQWdCLENBQUNHLEtBQUQsQ0FBdkMsRUFBZ0QsT0FBT0EsS0FBUDs7QUFFaEQsUUFBSSxPQUFPQSxLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQy9CLFlBQU0sSUFBSU0sU0FBSixDQUFjLG9EQUFkLENBQU47QUFDRDs7QUFFRCxRQUFJLE9BQU9MLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakMsVUFBSUEsTUFBTSxDQUFDTSxHQUFQLENBQVdQLEtBQVgsQ0FBSixFQUF1QixPQUFPQyxNQUFNLENBQUNPLEdBQVAsQ0FBV1IsS0FBWCxDQUFQOztBQUV2QkMsTUFBQUEsTUFBTSxDQUFDUSxHQUFQLENBQVdULEtBQVgsRUFBa0JVLE9BQWxCO0FBQ0Q7O0FBRUQsYUFBU0EsT0FBVCxHQUFtQjtBQUNqQixhQUFPWixTQUFTLENBQUNFLEtBQUQsRUFBUVcsU0FBUixFQUFtQmpCLGNBQWMsQ0FBQyxJQUFELENBQWQsQ0FBcUJrQixXQUF4QyxDQUFoQjtBQUNEOztBQUVERixJQUFBQSxPQUFPLENBQUNHLFNBQVIsR0FBb0JDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjZixLQUFLLENBQUNhLFNBQXBCLEVBQStCO0FBQ2pERCxNQUFBQSxXQUFXLEVBQUU7QUFDWEksUUFBQUEsS0FBSyxFQUFFTixPQURJO0FBRVhPLFFBQUFBLFVBQVUsRUFBRSxLQUZEO0FBR1hDLFFBQUFBLFFBQVEsRUFBRSxJQUhDO0FBSVhDLFFBQUFBLFlBQVksRUFBRTtBQUpIO0FBRG9DLEtBQS9CLENBQXBCO0FBUUEsV0FBT3ZCLGNBQWMsQ0FBQ2MsT0FBRCxFQUFVVixLQUFWLENBQXJCO0FBQ0QsR0ExQkQ7O0FBNEJBSSxFQUFBQSxNQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZWUsVUFBZixHQUE0QixJQUF4RTtBQUNBLFNBQU9yQixnQkFBZ0IsQ0FBQ0MsS0FBRCxDQUF2QjtBQUNEOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUJOLGdCQUFqQjtBQUNBSyxNQUFNLENBQUNDLE9BQVAsQ0FBZSxTQUFmLElBQTRCRCxNQUFNLENBQUNDLE9BQW5DLEVBQTRDRCxNQUFNLENBQUNDLE9BQVAsQ0FBZWUsVUFBZixHQUE0QixJQUF4RSIsInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL2dldFByb3RvdHlwZU9mLmpzXCIpO1xuXG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxudmFyIGlzTmF0aXZlRnVuY3Rpb24gPSByZXF1aXJlKFwiLi9pc05hdGl2ZUZ1bmN0aW9uLmpzXCIpO1xuXG52YXIgY29uc3RydWN0ID0gcmVxdWlyZShcIi4vY29uc3RydWN0LmpzXCIpO1xuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3dyYXBOYXRpdmVTdXBlcjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiXX0=