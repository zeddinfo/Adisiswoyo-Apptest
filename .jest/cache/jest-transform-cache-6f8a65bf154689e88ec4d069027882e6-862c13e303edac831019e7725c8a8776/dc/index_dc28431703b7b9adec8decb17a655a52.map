{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","_chalk","data","_interopRequireDefault","require","_emittery","_exit","_throat","_jestUtil","_jestWorker","_runTest","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","TEST_WORKER_PATH","resolve","TestRunner","globalConfig","context","_globalConfig","_context","tests","watcher","onStart","onResult","onFailure","options","serial","_createInBandTestRun","_createParallelTestRun","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","then","isInterrupted","CancelRun","path","config","resolver","undefined","sendMessageToJest","eventName","args","eventEmitter","emit","deepCyclicCopy","keepPrototype","result","err","Promise","resolvers","Map","has","name","set","serializableModuleMap","moduleMap","toJSON","worker","Worker","exposedMethods","forkOptions","stdio","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","reject","changedFiles","sourcesRelatedToTestsInChangedFiles","UNSTABLE_onCustomMessage","event","payload","onError","type","console","error","onInterrupt","_","on","state","interrupted","runAllTests","all","map","cleanup","end","forceExited","yellow","race","listener","message","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n\n  _emittery = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _exit() {\n  const data = _interopRequireDefault(require('exit'));\n\n  _exit = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = require('jest-worker');\n\n  _jestWorker = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst TEST_WORKER_PATH = require.resolve('./testWorker');\n\nclass TestRunner {\n  constructor(globalConfig, context) {\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_context', void 0);\n\n    _defineProperty(this, 'eventEmitter', new (_emittery().default)());\n\n    _defineProperty(\n      this,\n      '__PRIVATE_UNSTABLE_API_supportsEventEmitters__',\n      true\n    );\n\n    _defineProperty(this, 'isSerial', void 0);\n\n    this._globalConfig = globalConfig;\n    this._context = context || {};\n  }\n\n  async runTests(tests, watcher, onStart, onResult, onFailure, options) {\n    return await (options.serial\n      ? this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure)\n      : this._createParallelTestRun(\n          tests,\n          watcher,\n          onStart,\n          onResult,\n          onFailure\n        ));\n  }\n\n  async _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = (0, _throat().default)(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              }\n\n              let sendMessageToJest; // Remove `if(onStart)` in Jest 27\n\n              if (onStart) {\n                await onStart(test);\n                return (0, _runTest.default)(\n                  test.path,\n                  this._globalConfig,\n                  test.context.config,\n                  test.context.resolver,\n                  this._context,\n                  undefined\n                );\n              } else {\n                // `deepCyclicCopy` used here to avoid mem-leak\n                sendMessageToJest = (eventName, args) =>\n                  this.eventEmitter.emit(\n                    eventName,\n                    (0, _jestUtil().deepCyclicCopy)(args, {\n                      keepPrototype: false\n                    })\n                  );\n\n                await this.eventEmitter.emit('test-file-start', [test]);\n                return (0, _runTest.default)(\n                  test.path,\n                  this._globalConfig,\n                  test.context.config,\n                  test.context.resolver,\n                  this._context,\n                  sendMessageToJest\n                );\n              }\n            })\n            .then(result => {\n              if (onResult) {\n                return onResult(test, result);\n              } else {\n                return this.eventEmitter.emit('test-file-success', [\n                  test,\n                  result\n                ]);\n              }\n            })\n            .catch(err => {\n              if (onFailure) {\n                return onFailure(test, err);\n              } else {\n                return this.eventEmitter.emit('test-file-failure', [test, err]);\n              }\n            })\n        ),\n      Promise.resolve()\n    );\n  }\n\n  async _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {\n    const resolvers = new Map();\n\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.name)) {\n        resolvers.set(test.context.config.name, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON()\n        });\n      }\n    }\n\n    const worker = new (_jestWorker().Worker)(TEST_WORKER_PATH, {\n      exposedMethods: ['worker'],\n      forkOptions: {\n        stdio: 'pipe'\n      },\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [\n        {\n          serializableResolvers: Array.from(resolvers.values())\n        }\n      ]\n    });\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n    const mutex = (0, _throat().default)(this._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n\n    const runTestInWorker = test =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        } // Remove `if(onStart)` in Jest 27\n\n        if (onStart) {\n          await onStart(test);\n        } else {\n          await this.eventEmitter.emit('test-file-start', [test]);\n        }\n\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n          },\n          globalConfig: this._globalConfig,\n          path: test.path\n        });\n\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]) => {\n            this.eventEmitter.emit(event, payload);\n          });\n        }\n\n        return promise;\n      });\n\n    const onError = async (err, test) => {\n      // Remove `if(onFailure)` in Jest 27\n      if (onFailure) {\n        await onFailure(test, err);\n      } else {\n        await this.eventEmitter.emit('test-file-failure', [test, err]);\n      }\n\n      if (err.type === 'ProcessTerminatedError') {\n        console.error(\n          'A worker process has quit unexpectedly! ' +\n            'Most likely this is an initialization error.'\n        );\n        (0, _exit().default)(1);\n      }\n    };\n\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test)\n          .then(result => {\n            if (onResult) {\n              return onResult(test, result);\n            } else {\n              return this.eventEmitter.emit('test-file-success', [\n                test,\n                result\n              ]);\n            }\n          })\n          .catch(error => onError(error, test))\n      )\n    );\n\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n\n      if (forceExited) {\n        console.error(\n          _chalk().default.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks.'\n          )\n        );\n      }\n    };\n\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n\n  on(eventName, listener) {\n    return this.eventEmitter.on(eventName, listener);\n  }\n}\n\nexports.default = TestRunner;\n\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"]}