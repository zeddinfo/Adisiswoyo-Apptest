c5f698fa01e476dc7e4f0f199b1febcb
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
'use strict';

_getJestObj().mock('../Libraries/Core/InitializeCore', function () {}).mock('../Libraries/Core/NativeExceptionsManager', function () {
  return {
    __esModule: true,
    "default": {
      reportException: jest.fn()
    }
  };
}).mock('../Libraries/ReactNative/UIManager', function () {
  return {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn()
      }
    },
    blur: jest.fn(),
    createView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    getViewManagerConfig: jest.fn(function (name) {
      if (name === 'AndroidDrawerLayout') {
        return {
          Constants: {
            DrawerPosition: {
              Left: 10
            }
          }
        };
      }
    }),
    hasViewManagerConfig: jest.fn(function (name) {
      return true;
    }),
    measure: jest.fn(),
    manageChildren: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    setChildren: jest.fn(),
    updateView: jest.fn(),
    AndroidDrawerLayout: {
      Constants: {
        DrawerPosition: {
          Left: 10
        }
      }
    },
    AndroidTextInput: {
      Commands: {}
    },
    ScrollView: {
      Constants: {}
    },
    View: {
      Constants: {}
    }
  };
}).mock('../Libraries/Image/Image', function () {
  return mockComponent('../Libraries/Image/Image');
}).mock('../Libraries/Text/Text', function () {
  return mockComponent('../Libraries/Text/Text', MockNativeMethods);
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return mockComponent('../Libraries/Components/TextInput/TextInput', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    isFocused: jest.fn(),
    clear: jest.fn(),
    getNativeRef: jest.fn()
  }));
}).mock('../Libraries/Modal/Modal', function () {
  return mockComponent('../Libraries/Modal/Modal');
}).mock('../Libraries/Components/View/View', function () {
  return mockComponent('../Libraries/Components/View/View', MockNativeMethods);
}).mock('../Libraries/Components/AccessibilityInfo/AccessibilityInfo', function () {
  return {
    __esModule: true,
    "default": {
      addEventListener: jest.fn(),
      announceForAccessibility: jest.fn(),
      isBoldTextEnabled: jest.fn(),
      isGrayscaleEnabled: jest.fn(),
      isInvertColorsEnabled: jest.fn(),
      isReduceMotionEnabled: jest.fn(),
      isReduceTransparencyEnabled: jest.fn(),
      isScreenReaderEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      removeEventListener: jest.fn(),
      setAccessibilityFocus: jest.fn(),
      sendAccessibilityEvent_unstable: jest.fn(),
      getRecommendedTimeoutMillis: jest.fn()
    }
  };
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return jest.requireActual('../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock');
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  var baseComponent = mockComponent('../Libraries/Components/ScrollView/ScrollView', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    getScrollResponder: jest.fn(),
    getScrollableNode: jest.fn(),
    getInnerViewNode: jest.fn(),
    getInnerViewRef: jest.fn(),
    getNativeScrollRef: jest.fn(),
    scrollTo: jest.fn(),
    scrollToEnd: jest.fn(),
    flashScrollIndicators: jest.fn(),
    scrollResponderZoomTo: jest.fn(),
    scrollResponderScrollNativeHandleToKeyboard: jest.fn()
  }));
  var mockScrollView = jest.requireActual('./mockScrollView');
  return mockScrollView(baseComponent);
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator');
}).mock('../Libraries/AppState/AppState', function () {
  return {
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    })
  };
}).mock('../Libraries/Linking/Linking', function () {
  return {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    openSettings: jest.fn(),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {
      return Promise.resolve();
    }),
    removeEventListener: jest.fn(),
    sendIntent: jest.fn()
  };
}) // Mock modules defined by the native layer (ex: Objective-C, Java)
.mock('../Libraries/BatchedBridge/NativeModules', function () {
  return {
    AlertManager: {
      alertWithArgs: jest.fn()
    },
    AsyncLocalStorage: {
      multiGet: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      }),
      multiSet: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiRemove: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiMerge: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      clear: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      getAllKeys: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      })
    },
    Clipboard: {
      getString: jest.fn(function () {
        return '';
      }),
      setString: jest.fn()
    },
    DeviceInfo: {
      getConstants: function getConstants() {
        return {
          Dimensions: {
            window: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            },
            screen: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            }
          }
        };
      }
    },
    DevSettings: {
      addMenuItem: jest.fn(),
      reload: jest.fn()
    },
    ImageLoader: {
      getSize: jest.fn(function (url) {
        return Promise.resolve({
          width: 320,
          height: 240
        });
      }),
      prefetchImage: jest.fn()
    },
    ImageViewManager: {
      getSize: jest.fn(function (uri, success) {
        return process.nextTick(function () {
          return success(320, 240);
        });
      }),
      prefetchImage: jest.fn()
    },
    KeyboardObserver: {
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    Networking: {
      sendRequest: jest.fn(),
      abortRequest: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    PlatformConstants: {
      getConstants: function getConstants() {
        return {};
      }
    },
    PushNotificationManager: {
      presentLocalNotification: jest.fn(),
      scheduleLocalNotification: jest.fn(),
      cancelAllLocalNotifications: jest.fn(),
      removeAllDeliveredNotifications: jest.fn(),
      getDeliveredNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return [];
        });
      }),
      removeDeliveredNotifications: jest.fn(),
      setApplicationIconBadgeNumber: jest.fn(),
      getApplicationIconBadgeNumber: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(0);
        });
      }),
      cancelLocalNotifications: jest.fn(),
      getScheduledLocalNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback();
        });
      }),
      requestPermissions: jest.fn(function () {
        return Promise.resolve({
          alert: true,
          badge: true,
          sound: true
        });
      }),
      abandonPermissions: jest.fn(),
      checkPermissions: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback({
            alert: true,
            badge: true,
            sound: true
          });
        });
      }),
      getInitialNotification: jest.fn(function () {
        return Promise.resolve(null);
      }),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    SourceCode: {
      getConstants: function getConstants() {
        return {
          scriptURL: null
        };
      }
    },
    StatusBarManager: {
      setColor: jest.fn(),
      setStyle: jest.fn(),
      setHidden: jest.fn(),
      setNetworkActivityIndicatorVisible: jest.fn(),
      setBackgroundColor: jest.fn(),
      setTranslucent: jest.fn(),
      getConstants: function getConstants() {
        return {
          HEIGHT: 42
        };
      }
    },
    Timing: {
      createTimer: jest.fn(),
      deleteTimer: jest.fn()
    },
    UIManager: {},
    BlobModule: {
      getConstants: function getConstants() {
        return {
          BLOB_URI_SCHEME: 'content',
          BLOB_URI_HOST: null
        };
      },
      addNetworkingHandler: jest.fn(),
      enableBlobSupport: jest.fn(),
      disableBlobSupport: jest.fn(),
      createFromParts: jest.fn(),
      sendBlob: jest.fn(),
      release: jest.fn()
    },
    WebSocketModule: {
      connect: jest.fn(),
      send: jest.fn(),
      sendBinary: jest.fn(),
      ping: jest.fn(),
      close: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    I18nManager: {
      allowRTL: jest.fn(),
      forceRTL: jest.fn(),
      swapLeftAndRightInRTL: jest.fn(),
      getConstants: function getConstants() {
        return {
          isRTL: false,
          doLeftAndRightSwapInRTL: true
        };
      }
    }
  };
}).mock('../Libraries/NativeComponent/NativeComponentRegistry', function () {
  return {
    get: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual('./mockNativeComponent')(name);
    }),
    getWithFallback_DEPRECATED: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual('./mockNativeComponent')(name);
    }),
    setRuntimeConfigProvider: jest.fn()
  };
}).mock('../Libraries/ReactNative/requireNativeComponent', function () {
  return jest.requireActual('./mockNativeComponent');
}).mock('../Libraries/Utilities/verifyComponentAttributeEquivalence', function () {
  return function () {};
}).mock('../Libraries/Components/View/ViewNativeComponent', function () {
  var React = require('react');

  var Component = /*#__PURE__*/function (_React$Component) {
    (0, _inherits2["default"])(Component, _React$Component);

    var _super = _createSuper(Component);

    function Component() {
      (0, _classCallCheck2["default"])(this, Component);
      return _super.apply(this, arguments);
    }

    (0, _createClass2["default"])(Component, [{
      key: "render",
      value: function render() {
        return React.createElement('View', this.props, this.props.children);
      }
    }]);
    return Component;
  }(React.Component);

  Component.displayName = 'View';
  return {
    __esModule: true,
    "default": Component
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

var MockNativeMethods = jest.requireActual('./MockNativeMethods');
var mockComponent = jest.requireActual('./mockComponent');
jest.requireActual('@react-native/polyfills/Object.es7');
jest.requireActual('@react-native/polyfills/error-guard');
global.__DEV__ = true;
global.performance = {
  now: jest.fn(Date.now)
};
global.Promise = jest.requireActual('promise');
global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');

global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};

global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
}; // there's a __mock__ for it.


jest.setMock('../Libraries/vendor/core/ErrorUtils', require('../Libraries/vendor/core/ErrorUtils'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sIm5hbWVzIjpbIm1vY2siLCJfX2VzTW9kdWxlIiwicmVwb3J0RXhjZXB0aW9uIiwiamVzdCIsImZuIiwiQW5kcm9pZFZpZXdQYWdlciIsIkNvbW1hbmRzIiwic2V0UGFnZSIsInNldFBhZ2VXaXRob3V0QW5pbWF0aW9uIiwiYmx1ciIsImNyZWF0ZVZpZXciLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJmb2N1cyIsImdldFZpZXdNYW5hZ2VyQ29uZmlnIiwibmFtZSIsIkNvbnN0YW50cyIsIkRyYXdlclBvc2l0aW9uIiwiTGVmdCIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIiwibWVhc3VyZSIsIm1hbmFnZUNoaWxkcmVuIiwicmVtb3ZlU3Vidmlld3NGcm9tQ29udGFpbmVyV2l0aElEIiwicmVwbGFjZUV4aXN0aW5nTm9uUm9vdFZpZXciLCJzZXRDaGlsZHJlbiIsInVwZGF0ZVZpZXciLCJBbmRyb2lkRHJhd2VyTGF5b3V0IiwiQW5kcm9pZFRleHRJbnB1dCIsIlNjcm9sbFZpZXciLCJWaWV3IiwibW9ja0NvbXBvbmVudCIsIk1vY2tOYXRpdmVNZXRob2RzIiwiaXNGb2N1c2VkIiwiY2xlYXIiLCJnZXROYXRpdmVSZWYiLCJhZGRFdmVudExpc3RlbmVyIiwiYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5IiwiaXNCb2xkVGV4dEVuYWJsZWQiLCJpc0dyYXlzY2FsZUVuYWJsZWQiLCJpc0ludmVydENvbG9yc0VuYWJsZWQiLCJpc1JlZHVjZU1vdGlvbkVuYWJsZWQiLCJpc1JlZHVjZVRyYW5zcGFyZW5jeUVuYWJsZWQiLCJpc1NjcmVlblJlYWRlckVuYWJsZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRBY2Nlc3NpYmlsaXR5Rm9jdXMiLCJzZW5kQWNjZXNzaWJpbGl0eUV2ZW50X3Vuc3RhYmxlIiwiZ2V0UmVjb21tZW5kZWRUaW1lb3V0TWlsbGlzIiwicmVxdWlyZUFjdHVhbCIsImJhc2VDb21wb25lbnQiLCJnZXRTY3JvbGxSZXNwb25kZXIiLCJnZXRTY3JvbGxhYmxlTm9kZSIsImdldElubmVyVmlld05vZGUiLCJnZXRJbm5lclZpZXdSZWYiLCJnZXROYXRpdmVTY3JvbGxSZWYiLCJzY3JvbGxUbyIsInNjcm9sbFRvRW5kIiwiZmxhc2hTY3JvbGxJbmRpY2F0b3JzIiwic2Nyb2xsUmVzcG9uZGVyWm9vbVRvIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZCIsIm1vY2tTY3JvbGxWaWV3IiwicmVtb3ZlIiwib3BlblVSTCIsImNhbk9wZW5VUkwiLCJvcGVuU2V0dGluZ3MiLCJnZXRJbml0aWFsVVJMIiwic2VuZEludGVudCIsIkFsZXJ0TWFuYWdlciIsImFsZXJ0V2l0aEFyZ3MiLCJBc3luY0xvY2FsU3RvcmFnZSIsIm11bHRpR2V0Iiwia2V5cyIsImNhbGxiYWNrIiwicHJvY2VzcyIsIm5leHRUaWNrIiwibXVsdGlTZXQiLCJlbnRyaWVzIiwibXVsdGlSZW1vdmUiLCJtdWx0aU1lcmdlIiwiZ2V0QWxsS2V5cyIsIkNsaXBib2FyZCIsImdldFN0cmluZyIsInNldFN0cmluZyIsIkRldmljZUluZm8iLCJnZXRDb25zdGFudHMiLCJEaW1lbnNpb25zIiwid2luZG93IiwiZm9udFNjYWxlIiwiaGVpZ2h0Iiwic2NhbGUiLCJ3aWR0aCIsInNjcmVlbiIsIkRldlNldHRpbmdzIiwiYWRkTWVudUl0ZW0iLCJyZWxvYWQiLCJJbWFnZUxvYWRlciIsImdldFNpemUiLCJ1cmwiLCJwcmVmZXRjaEltYWdlIiwiSW1hZ2VWaWV3TWFuYWdlciIsInVyaSIsInN1Y2Nlc3MiLCJLZXlib2FyZE9ic2VydmVyIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lcnMiLCJOZXR3b3JraW5nIiwic2VuZFJlcXVlc3QiLCJhYm9ydFJlcXVlc3QiLCJQbGF0Zm9ybUNvbnN0YW50cyIsIlB1c2hOb3RpZmljYXRpb25NYW5hZ2VyIiwicHJlc2VudExvY2FsTm90aWZpY2F0aW9uIiwic2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbiIsImNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9ucyIsInJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMiLCJnZXREZWxpdmVyZWROb3RpZmljYXRpb25zIiwicmVtb3ZlRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsInNldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyIiwiZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnMiLCJnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnMiLCJyZXF1ZXN0UGVybWlzc2lvbnMiLCJhbGVydCIsImJhZGdlIiwic291bmQiLCJhYmFuZG9uUGVybWlzc2lvbnMiLCJjaGVja1Blcm1pc3Npb25zIiwiZ2V0SW5pdGlhbE5vdGlmaWNhdGlvbiIsIlNvdXJjZUNvZGUiLCJzY3JpcHRVUkwiLCJTdGF0dXNCYXJNYW5hZ2VyIiwic2V0Q29sb3IiLCJzZXRTdHlsZSIsInNldEhpZGRlbiIsInNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJzZXRUcmFuc2x1Y2VudCIsIkhFSUdIVCIsIlRpbWluZyIsImNyZWF0ZVRpbWVyIiwiZGVsZXRlVGltZXIiLCJVSU1hbmFnZXIiLCJCbG9iTW9kdWxlIiwiQkxPQl9VUklfU0NIRU1FIiwiQkxPQl9VUklfSE9TVCIsImFkZE5ldHdvcmtpbmdIYW5kbGVyIiwiZW5hYmxlQmxvYlN1cHBvcnQiLCJkaXNhYmxlQmxvYlN1cHBvcnQiLCJjcmVhdGVGcm9tUGFydHMiLCJzZW5kQmxvYiIsInJlbGVhc2UiLCJXZWJTb2NrZXRNb2R1bGUiLCJjb25uZWN0Iiwic2VuZCIsInNlbmRCaW5hcnkiLCJwaW5nIiwiY2xvc2UiLCJJMThuTWFuYWdlciIsImFsbG93UlRMIiwiZm9yY2VSVEwiLCJzd2FwTGVmdEFuZFJpZ2h0SW5SVEwiLCJpc1JUTCIsImRvTGVmdEFuZFJpZ2h0U3dhcEluUlRMIiwiZ2V0Iiwidmlld0NvbmZpZ1Byb3ZpZGVyIiwiZ2V0V2l0aEZhbGxiYWNrX0RFUFJFQ0FURUQiLCJzZXRSdW50aW1lQ29uZmlnUHJvdmlkZXIiLCJSZWFjdCIsInJlcXVpcmUiLCJDb21wb25lbnQiLCJjcmVhdGVFbGVtZW50IiwicHJvcHMiLCJjaGlsZHJlbiIsImRpc3BsYXlOYW1lIiwiZ2xvYmFsIiwiX19ERVZfXyIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwiY2xlYXJUaW1lb3V0Iiwic2V0TW9jayJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQThCQSxjQUNHQSxJQURILENBQ1Esa0NBRFIsRUFDNEMsWUFBTSxDQUFFLENBRHBELEVBRUdBLElBRkgsQ0FFUSwyQ0FGUixFQUVxRDtBQUFBLFNBQU87QUFDeERDLElBQUFBLFVBQVUsRUFBRSxJQUQ0QztBQUV4RCxlQUFTO0FBQ1BDLE1BQUFBLGVBQWUsRUFBRUMsSUFBSSxDQUFDQyxFQUFMO0FBRFY7QUFGK0MsR0FBUDtBQUFBLENBRnJELEVBUUdKLElBUkgsQ0FRUSxvQ0FSUixFQVE4QztBQUFBLFNBQU87QUFDakRLLElBQUFBLGdCQUFnQixFQUFFO0FBQ2hCQyxNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsT0FBTyxFQUFFSixJQUFJLENBQUNDLEVBQUwsRUFERDtBQUVSSSxRQUFBQSx1QkFBdUIsRUFBRUwsSUFBSSxDQUFDQyxFQUFMO0FBRmpCO0FBRE0sS0FEK0I7QUFPakRLLElBQUFBLElBQUksRUFBRU4sSUFBSSxDQUFDQyxFQUFMLEVBUDJDO0FBUWpETSxJQUFBQSxVQUFVLEVBQUVQLElBQUksQ0FBQ0MsRUFBTCxF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Ozs7QUFDQXJMLElBQUksQ0FBQ3VMLE9BQUwsQ0FDRSxxQ0FERixFQUVFakIsT0FBTyxDQUFDLHFDQUFELENBRlQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vY2tOYXRpdmVNZXRob2RzID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL01vY2tOYXRpdmVNZXRob2RzJyk7XG5jb25zdCBtb2NrQ29tcG9uZW50ID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL21vY2tDb21wb25lbnQnKTtcblxuamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF0aXZlL3BvbHlmaWxscy9PYmplY3QuZXM3Jyk7XG5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXRpdmUvcG9seWZpbGxzL2Vycm9yLWd1YXJkJyk7XG5cbmdsb2JhbC5fX0RFVl9fID0gdHJ1ZTtcblxuZ2xvYmFsLnBlcmZvcm1hbmNlID0ge1xuICBub3c6IGplc3QuZm4oRGF0ZS5ub3cpLFxufTtcblxuZ2xvYmFsLlByb21pc2UgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3Byb21pc2UnKTtcbmdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZScpO1xuXG5nbG9iYWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufTtcbmdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG4vLyB0aGVyZSdzIGEgX19tb2NrX18gZm9yIGl0LlxuamVzdC5zZXRNb2NrKFxuICAnLi4vTGlicmFyaWVzL3ZlbmRvci9jb3JlL0Vycm9yVXRpbHMnLFxuICByZXF1aXJlKCcuLi9MaWJyYXJpZXMvdmVuZG9yL2NvcmUvRXJyb3JVdGlscycpLFxuKTtcblxuamVzdFxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvcmUvSW5pdGlhbGl6ZUNvcmUnLCAoKSA9PiB7fSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db3JlL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJywgKCkgPT4gKHtcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJlcG9ydEV4Y2VwdGlvbjogamVzdC5mbigpLFxuICAgIH0sXG4gIH0pKVxuICAubW9jaygnLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL1VJTWFuYWdlcicsICgpID0+ICh7XG4gICAgQW5kcm9pZFZpZXdQYWdlcjoge1xuICAgICAgQ29tbWFuZHM6IHtcbiAgICAgICAgc2V0UGFnZTogamVzdC5mbigpLFxuICAgICAgICBzZXRQYWdlV2l0aG91dEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJsdXI6IGplc3QuZm4oKSxcbiAgICBjcmVhdGVWaWV3OiBqZXN0LmZuKCksXG4gICAgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzOiB7fSxcbiAgICBjdXN0b21EaXJlY3RFdmVudFR5cGVzOiB7fSxcbiAgICBkaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZDogamVzdC5mbigpLFxuICAgIGZvY3VzOiBqZXN0LmZuKCksXG4gICAgZ2V0Vmlld01hbmFnZXJDb25maWc6IGplc3QuZm4obmFtZSA9PiB7XG4gICAgICBpZiAobmFtZSA9PT0gJ0FuZHJvaWREcmF3ZXJMYXlvdXQnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgQ29uc3RhbnRzOiB7XG4gICAgICAgICAgICBEcmF3ZXJQb3NpdGlvbjoge1xuICAgICAgICAgICAgICBMZWZ0OiAxMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBoYXNWaWV3TWFuYWdlckNvbmZpZzogamVzdC5mbihuYW1lID0+IHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLFxuICAgIG1lYXN1cmU6IGplc3QuZm4oKSxcbiAgICBtYW5hZ2VDaGlsZHJlbjogamVzdC5mbigpLFxuICAgIHJlbW92ZVN1YnZpZXdzRnJvbUNvbnRhaW5lcldpdGhJRDogamVzdC5mbigpLFxuICAgIHJlcGxhY2VFeGlzdGluZ05vblJvb3RWaWV3OiBqZXN0LmZuKCksXG4gICAgc2V0Q2hpbGRyZW46IGplc3QuZm4oKSxcbiAgICB1cGRhdGVWaWV3OiBqZXN0LmZuKCksXG4gICAgQW5kcm9pZERyYXdlckxheW91dDoge1xuICAgICAgQ29uc3RhbnRzOiB7XG4gICAgICAgIERyYXdlclBvc2l0aW9uOiB7XG4gICAgICAgICAgTGVmdDogMTAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgQW5kcm9pZFRleHRJbnB1dDoge1xuICAgICAgQ29tbWFuZHM6IHt9LFxuICAgIH0sXG4gICAgU2Nyb2xsVmlldzoge1xuICAgICAgQ29uc3RhbnRzOiB7fSxcbiAgICB9LFxuICAgIFZpZXc6IHtcbiAgICAgIENvbnN0YW50czoge30sXG4gICAgfSxcbiAgfSkpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2UnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9JbWFnZS9JbWFnZScpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvVGV4dC9UZXh0JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvVGV4dC9UZXh0JywgTW9ja05hdGl2ZU1ldGhvZHMpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0Jywge1xuICAgICAgLi4uTW9ja05hdGl2ZU1ldGhvZHMsXG4gICAgICBpc0ZvY3VzZWQ6IGplc3QuZm4oKSxcbiAgICAgIGNsZWFyOiBqZXN0LmZuKCksXG4gICAgICBnZXROYXRpdmVSZWY6IGplc3QuZm4oKSxcbiAgICB9KSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL01vZGFsL01vZGFsJywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvTW9kYWwvTW9kYWwnKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXcnLCBNb2NrTmF0aXZlTWV0aG9kcyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL0FjY2Vzc2liaWxpdHlJbmZvJywgKCkgPT4gKHtcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIGFubm91bmNlRm9yQWNjZXNzaWJpbGl0eTogamVzdC5mbigpLFxuICAgICAgaXNCb2xkVGV4dEVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICAgIGlzR3JheXNjYWxlRW5hYmxlZDogamVzdC5mbigpLFxuICAgICAgaXNJbnZlcnRDb2xvcnNFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgICBpc1JlZHVjZU1vdGlvbkVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICAgIGlzUmVkdWNlVHJhbnNwYXJlbmN5RW5hYmxlZDogamVzdC5mbigpLFxuICAgICAgaXNTY3JlZW5SZWFkZXJFbmFibGVkOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShmYWxzZSkpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgc2V0QWNjZXNzaWJpbGl0eUZvY3VzOiBqZXN0LmZuKCksXG4gICAgICBzZW5kQWNjZXNzaWJpbGl0eUV2ZW50X3Vuc3RhYmxlOiBqZXN0LmZuKCksXG4gICAgICBnZXRSZWNvbW1lbmRlZFRpbWVvdXRNaWxsaXM6IGplc3QuZm4oKSxcbiAgICB9LFxuICB9KSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1JlZnJlc2hDb250cm9sL1JlZnJlc2hDb250cm9sJywgKCkgPT5cbiAgICBqZXN0LnJlcXVpcmVBY3R1YWwoXG4gICAgICAnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvX19tb2Nrc19fL1JlZnJlc2hDb250cm9sTW9jaycsXG4gICAgKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3JywgKCkgPT4ge1xuICAgIGNvbnN0IGJhc2VDb21wb25lbnQgPSBtb2NrQ29tcG9uZW50KFxuICAgICAgJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldycsXG4gICAgICB7XG4gICAgICAgIC4uLk1vY2tOYXRpdmVNZXRob2RzLFxuICAgICAgICBnZXRTY3JvbGxSZXNwb25kZXI6IGplc3QuZm4oKSxcbiAgICAgICAgZ2V0U2Nyb2xsYWJsZU5vZGU6IGplc3QuZm4oKSxcbiAgICAgICAgZ2V0SW5uZXJWaWV3Tm9kZTogamVzdC5mbigpLFxuICAgICAgICBnZXRJbm5lclZpZXdSZWY6IGplc3QuZm4oKSxcbiAgICAgICAgZ2V0TmF0aXZlU2Nyb2xsUmVmOiBqZXN0LmZuKCksXG4gICAgICAgIHNjcm9sbFRvOiBqZXN0LmZuKCksXG4gICAgICAgIHNjcm9sbFRvRW5kOiBqZXN0LmZuKCksXG4gICAgICAgIGZsYXNoU2Nyb2xsSW5kaWNhdG9yczogamVzdC5mbigpLFxuICAgICAgICBzY3JvbGxSZXNwb25kZXJab29tVG86IGplc3QuZm4oKSxcbiAgICAgICAgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZDogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICApO1xuICAgIGNvbnN0IG1vY2tTY3JvbGxWaWV3ID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL21vY2tTY3JvbGxWaWV3Jyk7XG4gICAgcmV0dXJuIG1vY2tTY3JvbGxWaWV3KGJhc2VDb21wb25lbnQpO1xuICB9KVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoXG4gICAgICAnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InLFxuICAgICksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9BcHBTdGF0ZS9BcHBTdGF0ZScsICgpID0+ICh7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigoKSA9PiAoe1xuICAgICAgcmVtb3ZlOiBqZXN0LmZuKCksXG4gICAgfSkpLFxuICB9KSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9MaW5raW5nL0xpbmtpbmcnLCAoKSA9PiAoe1xuICAgIG9wZW5VUkw6IGplc3QuZm4oKSxcbiAgICBjYW5PcGVuVVJMOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh0cnVlKSksXG4gICAgb3BlblNldHRpbmdzOiBqZXN0LmZuKCksXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGdldEluaXRpYWxVUkw6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBzZW5kSW50ZW50OiBqZXN0LmZuKCksXG4gIH0pKVxuICAvLyBNb2NrIG1vZHVsZXMgZGVmaW5lZCBieSB0aGUgbmF0aXZlIGxheWVyIChleDogT2JqZWN0aXZlLUMsIEphdmEpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQmF0Y2hlZEJyaWRnZS9OYXRpdmVNb2R1bGVzJywgKCkgPT4gKHtcbiAgICBBbGVydE1hbmFnZXI6IHtcbiAgICAgIGFsZXJ0V2l0aEFyZ3M6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIEFzeW5jTG9jYWxTdG9yYWdlOiB7XG4gICAgICBtdWx0aUdldDogamVzdC5mbigoa2V5cywgY2FsbGJhY2spID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCwgW10pKSxcbiAgICAgICksXG4gICAgICBtdWx0aVNldDogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICAgKSxcbiAgICAgIG11bHRpUmVtb3ZlOiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSksXG4gICAgICApLFxuICAgICAgbXVsdGlNZXJnZTogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICAgKSxcbiAgICAgIGNsZWFyOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpKSxcbiAgICAgIGdldEFsbEtleXM6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsLCBbXSkpLFxuICAgICAgKSxcbiAgICB9LFxuICAgIENsaXBib2FyZDoge1xuICAgICAgZ2V0U3RyaW5nOiBqZXN0LmZuKCgpID0+ICcnKSxcbiAgICAgIHNldFN0cmluZzogamVzdC5mbigpLFxuICAgIH0sXG4gICAgRGV2aWNlSW5mbzoge1xuICAgICAgZ2V0Q29uc3RhbnRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIERpbWVuc2lvbnM6IHtcbiAgICAgICAgICAgIHdpbmRvdzoge1xuICAgICAgICAgICAgICBmb250U2NhbGU6IDIsXG4gICAgICAgICAgICAgIGhlaWdodDogMTMzNCxcbiAgICAgICAgICAgICAgc2NhbGU6IDIsXG4gICAgICAgICAgICAgIHdpZHRoOiA3NTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NyZWVuOiB7XG4gICAgICAgICAgICAgIGZvbnRTY2FsZTogMixcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMzM0LFxuICAgICAgICAgICAgICBzY2FsZTogMixcbiAgICAgICAgICAgICAgd2lkdGg6IDc1MCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBEZXZTZXR0aW5nczoge1xuICAgICAgYWRkTWVudUl0ZW06IGplc3QuZm4oKSxcbiAgICAgIHJlbG9hZDogamVzdC5mbigpLFxuICAgIH0sXG4gICAgSW1hZ2VMb2FkZXI6IHtcbiAgICAgIGdldFNpemU6IGplc3QuZm4odXJsID0+IFByb21pc2UucmVzb2x2ZSh7d2lkdGg6IDMyMCwgaGVpZ2h0OiAyNDB9KSksXG4gICAgICBwcmVmZXRjaEltYWdlOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBJbWFnZVZpZXdNYW5hZ2VyOiB7XG4gICAgICBnZXRTaXplOiBqZXN0LmZuKCh1cmksIHN1Y2Nlc3MpID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gc3VjY2VzcygzMjAsIDI0MCkpLFxuICAgICAgKSxcbiAgICAgIHByZWZldGNoSW1hZ2U6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIEtleWJvYXJkT2JzZXJ2ZXI6IHtcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIE5ldHdvcmtpbmc6IHtcbiAgICAgIHNlbmRSZXF1ZXN0OiBqZXN0LmZuKCksXG4gICAgICBhYm9ydFJlcXVlc3Q6IGplc3QuZm4oKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIFBsYXRmb3JtQ29uc3RhbnRzOiB7XG4gICAgICBnZXRDb25zdGFudHMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBQdXNoTm90aWZpY2F0aW9uTWFuYWdlcjoge1xuICAgICAgcHJlc2VudExvY2FsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG4gICAgICBzY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG4gICAgICBjYW5jZWxBbGxMb2NhbE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcbiAgICAgIGdldERlbGl2ZXJlZE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBbXSksXG4gICAgICApLFxuICAgICAgcmVtb3ZlRGVsaXZlcmVkTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgICAgc2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXI6IGplc3QuZm4oKSxcbiAgICAgIGdldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyOiBqZXN0LmZuKGNhbGxiYWNrID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2soMCkpLFxuICAgICAgKSxcbiAgICAgIGNhbmNlbExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgICAgZ2V0U2NoZWR1bGVkTG9jYWxOb3RpZmljYXRpb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2soKSksXG4gICAgICApLFxuICAgICAgcmVxdWVzdFBlcm1pc3Npb25zOiBqZXN0LmZuKCgpID0+XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh7YWxlcnQ6IHRydWUsIGJhZGdlOiB0cnVlLCBzb3VuZDogdHJ1ZX0pLFxuICAgICAgKSxcbiAgICAgIGFiYW5kb25QZXJtaXNzaW9uczogamVzdC5mbigpLFxuICAgICAgY2hlY2tQZXJtaXNzaW9uczogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+XG4gICAgICAgICAgY2FsbGJhY2soe2FsZXJ0OiB0cnVlLCBiYWRnZTogdHJ1ZSwgc291bmQ6IHRydWV9KSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgICBnZXRJbml0aWFsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBTb3VyY2VDb2RlOiB7XG4gICAgICBnZXRDb25zdGFudHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2NyaXB0VVJMOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9LFxuICAgIFN0YXR1c0Jhck1hbmFnZXI6IHtcbiAgICAgIHNldENvbG9yOiBqZXN0LmZuKCksXG4gICAgICBzZXRTdHlsZTogamVzdC5mbigpLFxuICAgICAgc2V0SGlkZGVuOiBqZXN0LmZuKCksXG4gICAgICBzZXROZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlOiBqZXN0LmZuKCksXG4gICAgICBzZXRCYWNrZ3JvdW5kQ29sb3I6IGplc3QuZm4oKSxcbiAgICAgIHNldFRyYW5zbHVjZW50OiBqZXN0LmZuKCksXG4gICAgICBnZXRDb25zdGFudHM6ICgpID0+ICh7XG4gICAgICAgIEhFSUdIVDogNDIsXG4gICAgICB9KSxcbiAgICB9LFxuICAgIFRpbWluZzoge1xuICAgICAgY3JlYXRlVGltZXI6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZVRpbWVyOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBVSU1hbmFnZXI6IHt9LFxuICAgIEJsb2JNb2R1bGU6IHtcbiAgICAgIGdldENvbnN0YW50czogKCkgPT4gKHtCTE9CX1VSSV9TQ0hFTUU6ICdjb250ZW50JywgQkxPQl9VUklfSE9TVDogbnVsbH0pLFxuICAgICAgYWRkTmV0d29ya2luZ0hhbmRsZXI6IGplc3QuZm4oKSxcbiAgICAgIGVuYWJsZUJsb2JTdXBwb3J0OiBqZXN0LmZuKCksXG4gICAgICBkaXNhYmxlQmxvYlN1cHBvcnQ6IGplc3QuZm4oKSxcbiAgICAgIGNyZWF0ZUZyb21QYXJ0czogamVzdC5mbigpLFxuICAgICAgc2VuZEJsb2I6IGplc3QuZm4oKSxcbiAgICAgIHJlbGVhc2U6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIFdlYlNvY2tldE1vZHVsZToge1xuICAgICAgY29ubmVjdDogamVzdC5mbigpLFxuICAgICAgc2VuZDogamVzdC5mbigpLFxuICAgICAgc2VuZEJpbmFyeTogamVzdC5mbigpLFxuICAgICAgcGluZzogamVzdC5mbigpLFxuICAgICAgY2xvc2U6IGplc3QuZm4oKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIEkxOG5NYW5hZ2VyOiB7XG4gICAgICBhbGxvd1JUTDogamVzdC5mbigpLFxuICAgICAgZm9yY2VSVEw6IGplc3QuZm4oKSxcbiAgICAgIHN3YXBMZWZ0QW5kUmlnaHRJblJUTDogamVzdC5mbigpLFxuICAgICAgZ2V0Q29uc3RhbnRzOiAoKSA9PiAoe1xuICAgICAgICBpc1JUTDogZmFsc2UsXG4gICAgICAgIGRvTGVmdEFuZFJpZ2h0U3dhcEluUlRMOiB0cnVlLFxuICAgICAgfSksXG4gICAgfSxcbiAgfSkpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvTmF0aXZlQ29tcG9uZW50L05hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5JywgKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IGplc3QuZm4oKG5hbWUsIHZpZXdDb25maWdQcm92aWRlcikgPT4ge1xuICAgICAgICByZXR1cm4gamVzdC5yZXF1aXJlQWN0dWFsKCcuL21vY2tOYXRpdmVDb21wb25lbnQnKShuYW1lKTtcbiAgICAgIH0pLFxuICAgICAgZ2V0V2l0aEZhbGxiYWNrX0RFUFJFQ0FURUQ6IGplc3QuZm4oKG5hbWUsIHZpZXdDb25maWdQcm92aWRlcikgPT4ge1xuICAgICAgICByZXR1cm4gamVzdC5yZXF1aXJlQWN0dWFsKCcuL21vY2tOYXRpdmVDb21wb25lbnQnKShuYW1lKTtcbiAgICAgIH0pLFxuICAgICAgc2V0UnVudGltZUNvbmZpZ1Byb3ZpZGVyOiBqZXN0LmZuKCksXG4gICAgfTtcbiAgfSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9yZXF1aXJlTmF0aXZlQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIHJldHVybiBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vbW9ja05hdGl2ZUNvbXBvbmVudCcpO1xuICB9KVxuICAubW9jayhcbiAgICAnLi4vTGlicmFyaWVzL1V0aWxpdGllcy92ZXJpZnlDb21wb25lbnRBdHRyaWJ1dGVFcXVpdmFsZW5jZScsXG4gICAgKCkgPT4gZnVuY3Rpb24oKSB7fSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3TmF0aXZlQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgICBjb25zdCBDb21wb25lbnQgPSBjbGFzcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdWaWV3JywgdGhpcy5wcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdWaWV3JztcblxuICAgIHJldHVybiB7XG4gICAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgICAgZGVmYXVsdDogQ29tcG9uZW50LFxuICAgIH07XG4gIH0pO1xuIl19