1a73f5b80cd6283ad229f84878255b50
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault2(require("@babel/runtime/helpers/typeof"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = _default;

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

var _createProcessObject = _interopRequireDefault(require('./createProcessObject'));

var _deepCyclicCopy = _interopRequireDefault(require('./deepCyclicCopy'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || (0, _typeof2["default"])(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var DTRACE = Object.keys(global).filter(function (key) {
  return key.startsWith('DTRACE');
});

function _default(globalObject, globals) {
  var _Object$definePropert;

  globalObject.process = (0, _createProcessObject["default"])();
  var symbol = globalObject.Symbol; // Keep a reference to some globals that Jest needs

  Object.defineProperties(globalObject, (_Object$definePropert = {}, (0, _defineProperty2["default"])(_Object$definePropert, symbol["for"]('jest-native-promise'), {
    enumerable: false,
    value: Promise,
    writable: false
  }), (0, _defineProperty2["default"])(_Object$definePropert, symbol["for"]('jest-native-now'), {
    enumerable: false,
    value: globalObject.Date.now.bind(globalObject.Date),
    writable: false
  }), (0, _defineProperty2["default"])(_Object$definePropert, symbol["for"]('jest-native-read-file'), {
    enumerable: false,
    value: fs().readFileSync.bind(fs()),
    writable: false
  }), (0, _defineProperty2["default"])(_Object$definePropert, symbol["for"]('jest-native-write-file'), {
    enumerable: false,
    value: fs().writeFileSync.bind(fs()),
    writable: false
  }), (0, _defineProperty2["default"])(_Object$definePropert, symbol["for"]('jest-native-exists-file'), {
    enumerable: false,
    value: fs().existsSync.bind(fs()),
    writable: false
  }), (0, _defineProperty2["default"])(_Object$definePropert, 'jest-symbol-do-not-touch', {
    enumerable: false,
    value: symbol,
    writable: false
  }), _Object$definePropert)); // Forward some APIs.

  DTRACE.forEach(function (dtrace) {
    // @ts-expect-error: no index
    globalObject[dtrace] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // @ts-expect-error: no index
      return global[dtrace].apply(this, args);
    };
  });
  return Object.assign(globalObject, (0, _deepCyclicCopy["default"])(globals));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,