{"version":3,"sources":["runTest.js"],"names":["Object","defineProperty","exports","value","runTest","_chalk","data","_interopRequireDefault","require","fs","_interopRequireWildcard","_sourceMapSupport","_console","_transform","docblock","_jestLeakDetector","_jestMessageUtil","_jestResolve","_jestUtil","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","freezeConsole","testConsole","config","_log","fakeConsolePush","_type","message","error","ErrorWithStack","red","bold","formattedError","formatExecError","noStackTrace","undefined","process","stderr","write","exitCode","runTestInternal","path","globalConfig","resolver","context","sendMessageToJest","testSource","readFileSync","docblockPragmas","parse","extract","customEnvironment","testEnvironment","Array","isArray","Error","join","resolveTestEnvironment","requireResolveFunction","resolve","cacheFS","Map","createScriptTransformer","transformer","requireAndTranspileModule","TestEnvironment","env","JEST_JASMINE","testRunner","testFramework","Runtime","interopRequireDefault","moduleLoader","consoleOut","useStderr","stdout","consoleFormatter","type","getConsoleOutput","BufferedConsole","silent","NullConsole","verbose","CustomConsole","environment","console","testPath","getVmContext","exit","leakDetector","detectLeaks","setGlobal","global","runtime","changedFiles","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","coverageProvider","sourcesRelatedToTestsInChangedFiles","start","Date","now","setupFiles","esm","unstable_shouldLoadAsEsm","unstable_importModule","requireModule","sourcemapOptions","handleUncaughtExceptions","retrieveSourceMap","source","_runtime$getSourceMap","sourceMapSource","getSourceMaps","map","JSON","url","requireInternalModule","install","realExit","args","collectV8Coverage","setup","result","stack","stopCollectingV8Coverage","testCount","numPassingTests","numFailingTests","numPendingTests","numTodoTests","end","testRuntime","perfStats","slow","slowTestThreshold","testFilePath","getBuffer","skipped","displayName","coverage","getAllCoverageInfoCopy","coverageKeys","keys","length","v8Coverage","getAllV8CoverageInfoCopy","logHeapUsage","gc","memoryUsage","heapUsed","Promise","setImmediate","teardown","_runtime$teardown","resetRetrieveHandlers","setTimeout","isLeaking","leaks"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runTest;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMapSupport() {\n  const data = _interopRequireDefault(require('source-map-support'));\n\n  _sourceMapSupport = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _console() {\n  const data = require('@jest/console');\n\n  _console = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _transform() {\n  const data = require('@jest/transform');\n\n  _transform = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction docblock() {\n  const data = _interopRequireWildcard(require('jest-docblock'));\n\n  docblock = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestLeakDetector() {\n  const data = _interopRequireDefault(require('jest-leak-detector'));\n\n  _jestLeakDetector = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestResolve() {\n  const data = require('jest-resolve');\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction freezeConsole(testConsole, config) {\n  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here\n  testConsole._log = function fakeConsolePush(_type, message) {\n    const error = new (_jestUtil().ErrorWithStack)(\n      `${_chalk().default.red(\n        `${_chalk().default.bold(\n          'Cannot log after tests are done.'\n        )} Did you forget to wait for something async in your test?`\n      )}\\nAttempted to log \"${message}\".`,\n      fakeConsolePush\n    );\n    const formattedError = (0, _jestMessageUtil().formatExecError)(\n      error,\n      config,\n      {\n        noStackTrace: false\n      },\n      undefined,\n      true\n    );\n    process.stderr.write('\\n' + formattedError + '\\n');\n    process.exitCode = 1;\n  };\n} // Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\n\nasync function runTestInternal(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const testSource = fs().readFileSync(path, 'utf8');\n  const docblockPragmas = docblock().parse(docblock().extract(testSource));\n  const customEnvironment = docblockPragmas['jest-environment'];\n  let testEnvironment = config.testEnvironment;\n\n  if (customEnvironment) {\n    if (Array.isArray(customEnvironment)) {\n      throw new Error(\n        `You can only define a single test environment through docblocks, got \"${customEnvironment.join(\n          ', '\n        )}\"`\n      );\n    }\n\n    testEnvironment = (0, _jestResolve().resolveTestEnvironment)({\n      ...config,\n      requireResolveFunction: require.resolve,\n      testEnvironment: customEnvironment\n    });\n  }\n\n  const cacheFS = new Map([[path, testSource]]);\n  const transformer = await (0, _transform().createScriptTransformer)(\n    config,\n    cacheFS\n  );\n  const TestEnvironment = await transformer.requireAndTranspileModule(\n    testEnvironment\n  );\n  const testFramework = await transformer.requireAndTranspileModule(\n    process.env.JEST_JASMINE === '1'\n      ? require.resolve('jest-jasmine2')\n      : config.testRunner\n  );\n  const Runtime = (0, _jestUtil().interopRequireDefault)(\n    config.moduleLoader ? require(config.moduleLoader) : require('jest-runtime')\n  ).default;\n  const consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n\n  const consoleFormatter = (type, message) =>\n    (0, _console().getConsoleOutput)(\n      // 4 = the console call is buried 4 stack frames deep\n      _console().BufferedConsole.write([], type, message, 4),\n      config,\n      globalConfig\n    );\n\n  let testConsole;\n\n  if (globalConfig.silent) {\n    testConsole = new (_console().NullConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else if (globalConfig.verbose) {\n    testConsole = new (_console().CustomConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else {\n    testConsole = new (_console().BufferedConsole)();\n  }\n\n  const environment = new TestEnvironment(config, {\n    console: testConsole,\n    docblockPragmas,\n    testPath: path\n  });\n\n  if (typeof environment.getVmContext !== 'function') {\n    console.error(\n      `Test environment found at \"${testEnvironment}\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".`\n    );\n    process.exit(1);\n  }\n\n  const leakDetector = config.detectLeaks\n    ? new (_jestLeakDetector().default)(environment)\n    : null;\n  (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);\n  const runtime = new Runtime(\n    config,\n    environment,\n    resolver,\n    transformer,\n    cacheFS,\n    {\n      changedFiles:\n        context === null || context === void 0 ? void 0 : context.changedFiles,\n      collectCoverage: globalConfig.collectCoverage,\n      collectCoverageFrom: globalConfig.collectCoverageFrom,\n      collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,\n      coverageProvider: globalConfig.coverageProvider,\n      sourcesRelatedToTestsInChangedFiles:\n        context === null || context === void 0\n          ? void 0\n          : context.sourcesRelatedToTestsInChangedFiles\n    },\n    path\n  );\n  const start = Date.now();\n\n  for (const path of config.setupFiles) {\n    const esm = runtime.unstable_shouldLoadAsEsm(path);\n\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      runtime.requireModule(path);\n    }\n  }\n\n  const sourcemapOptions = {\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap: source => {\n      var _runtime$getSourceMap;\n\n      const sourceMapSource =\n        (_runtime$getSourceMap = runtime.getSourceMaps()) === null ||\n        _runtime$getSourceMap === void 0\n          ? void 0\n          : _runtime$getSourceMap.get(source);\n\n      if (sourceMapSource) {\n        try {\n          return {\n            map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),\n            url: source\n          };\n        } catch {}\n      }\n\n      return null;\n    }\n  }; // For tests\n\n  runtime\n    .requireInternalModule(\n      require.resolve('source-map-support'),\n      'source-map-support'\n    )\n    .install(sourcemapOptions); // For runtime errors\n\n  _sourceMapSupport().default.install(sourcemapOptions);\n\n  if (\n    environment.global &&\n    environment.global.process &&\n    environment.global.process.exit\n  ) {\n    const realExit = environment.global.process.exit;\n\n    environment.global.process.exit = function exit(...args) {\n      const error = new (_jestUtil().ErrorWithStack)(\n        `process.exit called with \"${args.join(', ')}\"`,\n        exit\n      );\n      const formattedError = (0, _jestMessageUtil().formatExecError)(\n        error,\n        config,\n        {\n          noStackTrace: false\n        },\n        undefined,\n        true\n      );\n      process.stderr.write(formattedError);\n      return realExit(...args);\n    };\n  } // if we don't have `getVmContext` on the env skip coverage\n\n  const collectV8Coverage =\n    globalConfig.coverageProvider === 'v8' &&\n    typeof environment.getVmContext === 'function';\n\n  try {\n    await environment.setup();\n    let result;\n\n    try {\n      if (collectV8Coverage) {\n        await runtime.collectV8Coverage();\n      }\n\n      result = await testFramework(\n        globalConfig,\n        config,\n        environment,\n        runtime,\n        path,\n        sendMessageToJest\n      );\n    } catch (err) {\n      // Access stack before uninstalling sourcemaps\n      err.stack;\n      throw err;\n    } finally {\n      if (collectV8Coverage) {\n        await runtime.stopCollectingV8Coverage();\n      }\n    }\n\n    freezeConsole(testConsole, config);\n    const testCount =\n      result.numPassingTests +\n      result.numFailingTests +\n      result.numPendingTests +\n      result.numTodoTests;\n    const end = Date.now();\n    const testRuntime = end - start;\n    result.perfStats = {\n      end,\n      runtime: testRuntime,\n      slow: testRuntime / 1000 > config.slowTestThreshold,\n      start\n    };\n    result.testFilePath = path;\n    result.console = testConsole.getBuffer();\n    result.skipped = testCount === result.numPendingTests;\n    result.displayName = config.displayName;\n    const coverage = runtime.getAllCoverageInfoCopy();\n\n    if (coverage) {\n      const coverageKeys = Object.keys(coverage);\n\n      if (coverageKeys.length) {\n        result.coverage = coverage;\n      }\n    }\n\n    if (collectV8Coverage) {\n      const v8Coverage = runtime.getAllV8CoverageInfoCopy();\n\n      if (v8Coverage && v8Coverage.length > 0) {\n        result.v8Coverage = v8Coverage;\n      }\n    }\n\n    if (globalConfig.logHeapUsage) {\n      if (global.gc) {\n        global.gc();\n      }\n\n      result.memoryUsage = process.memoryUsage().heapUsed;\n    } // Delay the resolution to allow log messages to be output.\n\n    return new Promise(resolve => {\n      setImmediate(() =>\n        resolve({\n          leakDetector,\n          result\n        })\n      );\n    });\n  } finally {\n    var _runtime$teardown;\n\n    await environment.teardown(); // TODO: this function might be missing, remove ? in Jest 26\n\n    (_runtime$teardown = runtime.teardown) === null ||\n    _runtime$teardown === void 0\n      ? void 0\n      : _runtime$teardown.call(runtime);\n\n    _sourceMapSupport().default.resetRetrieveHandlers();\n  }\n}\n\nasync function runTest(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const {leakDetector, result} = await runTestInternal(\n    path,\n    globalConfig,\n    config,\n    resolver,\n    context,\n    sendMessageToJest\n  );\n\n  if (leakDetector) {\n    // We wanna allow a tiny but time to pass to allow last-minute cleanup\n    await new Promise(resolve => setTimeout(resolve, 100)); // Resolve leak detector, outside the \"runTestInternal\" closure.\n\n    result.leaks = await leakDetector.isLeaking();\n  } else {\n    result.leaks = false;\n  }\n\n  return result;\n}\n"]}