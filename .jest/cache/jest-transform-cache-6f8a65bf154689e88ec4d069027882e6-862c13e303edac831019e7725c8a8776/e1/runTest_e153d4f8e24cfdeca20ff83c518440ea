12be9a61b9a5285d2beff34a8068bae5
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault2(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault2(require("@babel/runtime/helpers/typeof"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = runTest;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _sourceMapSupport() {
  var data = _interopRequireDefault(require('source-map-support'));

  _sourceMapSupport = function _sourceMapSupport() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('@jest/console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _transform() {
  var data = require('@jest/transform');

  _transform = function _transform() {
    return data;
  };

  return data;
}

function docblock() {
  var data = _interopRequireWildcard(require('jest-docblock'));

  docblock = function docblock() {
    return data;
  };

  return data;
}

function _jestLeakDetector() {
  var data = _interopRequireDefault(require('jest-leak-detector'));

  _jestLeakDetector = function _jestLeakDetector() {
    return data;
  };

  return data;
}

function _jestMessageUtil() {
  var data = require('jest-message-util');

  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };

  return data;
}

function _jestResolve() {
  var data = require('jest-resolve');

  _jestResolve = function _jestResolve() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || (0, _typeof2["default"])(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


function freezeConsole(testConsole, config) {
  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here
  testConsole._log = function fakeConsolePush(_type, message) {
    var error = new (_jestUtil().ErrorWithStack)("".concat(_chalk()["default"].red("".concat(_chalk()["default"].bold('Cannot log after tests are done.'), " Did you forget to wait for something async in your test?")), "\nAttempted to log \"").concat(message, "\"."), fakeConsolePush);
    var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
      noStackTrace: false
    }, undefined, true);
    process.stderr.write('\n' + formattedError + '\n');
    process.exitCode = 1;
  };
} // Keeping the core of "runTest" as a separate function (as "runTestInternal")
// is key to be able to detect memory leaks. Since all variables are local to
// the function, when "runTestInternal" finishes its execution, they can all be
// freed, UNLESS something else is leaking them (and that's why we can detect
// the leak!).
//
// If we had all the code in a single function, we should manually nullify all
// references to verify if there is a leak, which is not maintainable and error
// prone. That's why "runTestInternal" CANNOT be inlined inside "runTest".


function runTestInternal(_x, _x2, _x3, _x4, _x5, _x6) {
  return _runTestInternal.apply(this, arguments);
}

function _runTestInternal() {
  _runTestInternal = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(path, globalConfig, config, resolver, context, sendMessageToJest) {
    var testSource, docblockPragmas, customEnvironment, testEnvironment, cacheFS, transformer, TestEnvironment, testFramework, Runtime, consoleOut, consoleFormatter, testConsole, environment, leakDetector, runtime, start, _iterator, _step, _path, esm, sourcemapOptions, realExit, collectV8Coverage, result, testCount, end, testRuntime, coverage, coverageKeys, v8Coverage, _runtime$teardown;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            testSource = fs().readFileSync(path, 'utf8');
            docblockPragmas = docblock().parse(docblock().extract(testSource));
            customEnvironment = docblockPragmas['jest-environment'];
            testEnvironment = config.testEnvironment;

            if (!customEnvironment) {
              _context.next = 8;
              break;
            }

            if (!Array.isArray(customEnvironment)) {
              _context.next = 7;
              break;
            }

            throw new Error("You can only define a single test environment through docblocks, got \"".concat(customEnvironment.join(', '), "\""));

          case 7:
            testEnvironment = (0, _jestResolve().resolveTestEnvironment)(_objectSpread(_objectSpread({}, config), {}, {
              requireResolveFunction: require.resolve,
              testEnvironment: customEnvironment
            }));

          case 8:
            cacheFS = new Map([[path, testSource]]);
            _context.next = 11;
            return (0, _transform().createScriptTransformer)(config, cacheFS);

          case 11:
            transformer = _context.sent;
            _context.next = 14;
            return transformer.requireAndTranspileModule(testEnvironment);

          case 14:
            TestEnvironment = _context.sent;
            _context.next = 17;
            return transformer.requireAndTranspileModule(process.env.JEST_JASMINE === '1' ? require.resolve('jest-jasmine2') : config.testRunner);

          case 17:
            testFramework = _context.sent;
            Runtime = (0, _jestUtil().interopRequireDefault)(config.moduleLoader ? require(config.moduleLoader) : require('jest-runtime'))["default"];
            consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;

            consoleFormatter = function consoleFormatter(type, message) {
              return (0, _console().getConsoleOutput)( // 4 = the console call is buried 4 stack frames deep
              _console().BufferedConsole.write([], type, message, 4), config, globalConfig);
            };

            if (globalConfig.silent) {
              testConsole = new (_console().NullConsole)(consoleOut, consoleOut, consoleFormatter);
            } else if (globalConfig.verbose) {
              testConsole = new (_console().CustomConsole)(consoleOut, consoleOut, consoleFormatter);
            } else {
              testConsole = new (_console().BufferedConsole)();
            }

            environment = new TestEnvironment(config, {
              console: testConsole,
              docblockPragmas: docblockPragmas,
              testPath: path
            });

            if (typeof environment.getVmContext !== 'function') {
              console.error("Test environment found at \"".concat(testEnvironment, "\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\"."));
              process.exit(1);
            }

            leakDetector = config.detectLeaks ? new (_jestLeakDetector()["default"])(environment) : null;
            (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);
            runtime = new Runtime(config, environment, resolver, transformer, cacheFS, {
              changedFiles: context === null || context === void 0 ? void 0 : context.changedFiles,
              collectCoverage: globalConfig.collectCoverage,
              collectCoverageFrom: globalConfig.collectCoverageFrom,
              collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,
              coverageProvider: globalConfig.coverageProvider,
              sourcesRelatedToTestsInChangedFiles: context === null || context === void 0 ? void 0 : context.sourcesRelatedToTestsInChangedFiles
            }, path);
            start = Date.now();
            _iterator = _createForOfIteratorHelper(config.setupFiles);
            _context.prev = 29;

            _iterator.s();

          case 31:
            if ((_step = _iterator.n()).done) {
              _context.next = 42;
              break;
            }

            _path = _step.value;
            esm = runtime.unstable_shouldLoadAsEsm(_path);

            if (!esm) {
              _context.next = 39;
              break;
            }

            _context.next = 37;
            return runtime.unstable_importModule(_path);

          case 37:
            _context.next = 40;
            break;

          case 39:
            runtime.requireModule(_path);

          case 40:
            _context.next = 31;
            break;

          case 42:
            _context.next = 47;
            break;

          case 44:
            _context.prev = 44;
            _context.t0 = _context["catch"](29);

            _iterator.e(_context.t0);

          case 47:
            _context.prev = 47;

            _iterator.f();

            return _context.finish(47);

          case 50:
            sourcemapOptions = {
              environment: 'node',
              handleUncaughtExceptions: false,
              retrieveSourceMap: function retrieveSourceMap(source) {
                var _runtime$getSourceMap;

                var sourceMapSource = (_runtime$getSourceMap = runtime.getSourceMaps()) === null || _runtime$getSourceMap === void 0 ? void 0 : _runtime$getSourceMap.get(source);

                if (sourceMapSource) {
                  try {
                    return {
                      map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),
                      url: source
                    };
                  } catch (_unused) {}
                }

                return null;
              }
            }; // For tests

            runtime.requireInternalModule(require.resolve('source-map-support'), 'source-map-support').install(sourcemapOptions); // For runtime errors

            _sourceMapSupport()["default"].install(sourcemapOptions);

            if (environment.global && environment.global.process && environment.global.process.exit) {
              realExit = environment.global.process.exit;

              environment.global.process.exit = function exit() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                var error = new (_jestUtil().ErrorWithStack)("process.exit called with \"".concat(args.join(', '), "\""), exit);
                var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
                  noStackTrace: false
                }, undefined, true);
                process.stderr.write(formattedError);
                return realExit.apply(void 0, args);
              };
            } // if we don't have `getVmContext` on the env skip coverage


            collectV8Coverage = globalConfig.coverageProvider === 'v8' && typeof environment.getVmContext === 'function';
            _context.prev = 55;
            _context.next = 58;
            return environment.setup();

          case 58:
            _context.prev = 58;

            if (!collectV8Coverage) {
              _context.next = 62;
              break;
            }

            _context.next = 62;
            return runtime.collectV8Coverage();

          case 62:
            _context.next = 64;
            return testFramework(globalConfig, config, environment, runtime, path, sendMessageToJest);

          case 64:
            result = _context.sent;
            _context.next = 71;
            break;

          case 67:
            _context.prev = 67;
            _context.t1 = _context["catch"](58);
            // Access stack before uninstalling sourcemaps
            _context.t1.stack;
            throw _context.t1;

          case 71:
            _context.prev = 71;

            if (!collectV8Coverage) {
              _context.next = 75;
              break;
            }

            _context.next = 75;
            return runtime.stopCollectingV8Coverage();

          case 75:
            return _context.finish(71);

          case 76:
            freezeConsole(testConsole, config);
            testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests + result.numTodoTests;
            end = Date.now();
            testRuntime = end - start;
            result.perfStats = {
              end: end,
              runtime: testRuntime,
              slow: testRuntime / 1000 > config.slowTestThreshold,
              start: start
            };
            result.testFilePath = path;
            result.console = testConsole.getBuffer();
            result.skipped = testCount === result.numPendingTests;
            result.displayName = config.displayName;
            coverage = runtime.getAllCoverageInfoCopy();

            if (coverage) {
              coverageKeys = Object.keys(coverage);

              if (coverageKeys.length) {
                result.coverage = coverage;
              }
            }

            if (collectV8Coverage) {
              v8Coverage = runtime.getAllV8CoverageInfoCopy();

              if (v8Coverage && v8Coverage.length > 0) {
                result.v8Coverage = v8Coverage;
              }
            }

            if (globalConfig.logHeapUsage) {
              if (global.gc) {
                global.gc();
              }

              result.memoryUsage = process.memoryUsage().heapUsed;
            } // Delay the resolution to allow log messages to be output.


            return _context.abrupt("return", new Promise(function (resolve) {
              setImmediate(function () {
                return resolve({
                  leakDetector: leakDetector,
                  result: result
                });
              });
            }));

          case 90:
            _context.prev = 90;
            _context.next = 93;
            return environment.teardown();

          case 93:
            // TODO: this function might be missing, remove ? in Jest 26
            (_runtime$teardown = runtime.teardown) === null || _runtime$teardown === void 0 ? void 0 : _runtime$teardown.call(runtime);

            _sourceMapSupport()["default"].resetRetrieveHandlers();

            return _context.finish(90);

          case 96:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[29, 44, 47, 50], [55,, 90, 96], [58, 67, 71, 76]]);
  }));
  return _runTestInternal.apply(this, arguments);
}

function runTest(_x7, _x8, _x9, _x10, _x11, _x12) {
  return _runTest.apply(this, arguments);
}

function _runTest() {
  _runTest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(path, globalConfig, config, resolver, context, sendMessageToJest) {
    var _yield$runTestInterna, leakDetector, result;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest);

          case 2:
            _yield$runTestInterna = _context2.sent;
            leakDetector = _yield$runTestInterna.leakDetector;
            result = _yield$runTestInterna.result;

            if (!leakDetector) {
              _context2.next = 13;
              break;
            }

            _context2.next = 8;
            return new Promise(function (resolve) {
              return setTimeout(resolve, 100);
            });

          case 8:
            _context2.next = 10;
            return leakDetector.isLeaking();

          case 10:
            result.leaks = _context2.sent;
            _context2.next = 14;
            break;

          case 13:
            result.leaks = false;

          case 14:
            return _context2.abrupt("return", result);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _runTest.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,