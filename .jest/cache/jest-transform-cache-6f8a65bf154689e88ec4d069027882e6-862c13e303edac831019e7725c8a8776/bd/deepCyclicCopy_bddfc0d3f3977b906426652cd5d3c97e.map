{"version":3,"sources":["deepCyclicCopy.js"],"names":["Object","defineProperty","exports","value","deepCyclicCopy","EMPTY","Set","options","blacklist","keepPrototype","cycles","WeakMap","has","get","Array","isArray","deepCyclicCopyArray","deepCyclicCopyObject","object","newObject","create","getPrototypeOf","descriptors","getOwnPropertyDescriptors","set","keys","forEach","key","descriptor","configurable","defineProperties","array","newArray","constructor","length","i"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,WAAP,GAAkBE,cAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AAEA,SAASF,cAAT,CACED,KADF,EAOE;AAAA,MALAI,OAKA,uEALU;AACRC,IAAAA,SAAS,EAAEH,KADH;AAERI,IAAAA,aAAa,EAAE;AAFP,GAKV;AAAA,MADAC,MACA,uEADS,IAAIC,OAAJ,EACT;;AACA,MAAI,yBAAOR,KAAP,MAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/C,WAAOA,KAAP;AACD,GAFD,MAEO,IAAIO,MAAM,CAACE,GAAP,CAAWT,KAAX,CAAJ,EAAuB;AAC5B,WAAOO,MAAM,CAACG,GAAP,CAAWV,KAAX,CAAP;AACD,GAFM,MAEA,IAAIW,KAAK,CAACC,OAAN,CAAcZ,KAAd,CAAJ,EAA0B;AAC/B,WAAOa,mBAAmB,CAACb,KAAD,EAAQI,OAAR,EAAiBG,MAAjB,CAA1B;AACD,GAFM,MAEA;AACL,WAAOO,oBAAoB,CAACd,KAAD,EAAQI,OAAR,EAAiBG,MAAjB,CAA3B;AACD;AACF;;AAED,SAASO,oBAAT,CAA8BC,MAA9B,EAAsCX,OAAtC,EAA+CG,MAA/C,EAAuD;AACrD,MAAMS,SAAS,GAAGZ,OAAO,CAACE,aAAR,GACdT,MAAM,CAACoB,MAAP,CAAcpB,MAAM,CAACqB,cAAP,CAAsBH,MAAtB,CAAd,CADc,GAEd,EAFJ;AAGA,MAAMI,WAAW,GAAGtB,MAAM,CAACuB,yBAAP,CAAiCL,MAAjC,CAApB;AACAR,EAAAA,MAAM,CAACc,GAAP,CAAWN,MAAX,EAAmBC,SAAnB;AACAnB,EAAAA,MAAM,CAACyB,IAAP,CAAYH,WAAZ,EAAyBI,OAAzB,CAAiC,UAAAC,GAAG,EAAI;AACtC,QAAIpB,OAAO,CAACC,SAAR,IAAqBD,OAAO,CAACC,SAAR,CAAkBI,GAAlB,CAAsBe,GAAtB,CAAzB,EAAqD;AACnD,aAAOL,WAAW,CAACK,GAAD,CAAlB;AACA;AACD;;AAED,QAAMC,UAAU,GAAGN,WAAW,CAACK,GAAD,CAA9B;;AAEA,QAAI,OAAOC,UAAU,CAACzB,KAAlB,KAA4B,WAAhC,EAA6C;AAC3CyB,MAAAA,UAAU,CAACzB,KAAX,GAAmBC,cAAc,CAC/BwB,UAAU,CAACzB,KADoB,EAE/B;AACEK,QAAAA,SAAS,EAAEH,KADb;AAEEI,QAAAA,aAAa,EAAEF,OAAO,CAACE;AAFzB,OAF+B,EAM/BC,MAN+B,CAAjC;AAQD;;AAEDkB,IAAAA,UAAU,CAACC,YAAX,GAA0B,IAA1B;AACD,GApBD;AAqBA,SAAO7B,MAAM,CAAC8B,gBAAP,CAAwBX,SAAxB,EAAmCG,WAAnC,CAAP;AACD;;AAED,SAASN,mBAAT,CAA6Be,KAA7B,EAAoCxB,OAApC,EAA6CG,MAA7C,EAAqD;AACnD,MAAMsB,QAAQ,GAAGzB,OAAO,CAACE,aAAR,GACb,KAAKT,MAAM,CAACqB,cAAP,CAAsBU,KAAtB,EAA6BE,WAAlC,EAA+CF,KAAK,CAACG,MAArD,CADa,GAEb,EAFJ;AAGA,MAAMA,MAAM,GAAGH,KAAK,CAACG,MAArB;AACAxB,EAAAA,MAAM,CAACc,GAAP,CAAWO,KAAX,EAAkBC,QAAlB;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/BH,IAAAA,QAAQ,CAACG,CAAD,CAAR,GAAc/B,cAAc,CAC1B2B,KAAK,CAACI,CAAD,CADqB,EAE1B;AACE3B,MAAAA,SAAS,EAAEH,KADb;AAEEI,MAAAA,aAAa,EAAEF,OAAO,CAACE;AAFzB,KAF0B,EAM1BC,MAN0B,CAA5B;AAQD;;AAED,SAAOsB,QAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = deepCyclicCopy;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst EMPTY = new Set();\n\nfunction deepCyclicCopy(\n  value,\n  options = {\n    blacklist: EMPTY,\n    keepPrototype: false\n  },\n  cycles = new WeakMap()\n) {\n  if (typeof value !== 'object' || value === null) {\n    return value;\n  } else if (cycles.has(value)) {\n    return cycles.get(value);\n  } else if (Array.isArray(value)) {\n    return deepCyclicCopyArray(value, options, cycles);\n  } else {\n    return deepCyclicCopyObject(value, options, cycles);\n  }\n}\n\nfunction deepCyclicCopyObject(object, options, cycles) {\n  const newObject = options.keepPrototype\n    ? Object.create(Object.getPrototypeOf(object))\n    : {};\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  cycles.set(object, newObject);\n  Object.keys(descriptors).forEach(key => {\n    if (options.blacklist && options.blacklist.has(key)) {\n      delete descriptors[key];\n      return;\n    }\n\n    const descriptor = descriptors[key];\n\n    if (typeof descriptor.value !== 'undefined') {\n      descriptor.value = deepCyclicCopy(\n        descriptor.value,\n        {\n          blacklist: EMPTY,\n          keepPrototype: options.keepPrototype\n        },\n        cycles\n      );\n    }\n\n    descriptor.configurable = true;\n  });\n  return Object.defineProperties(newObject, descriptors);\n}\n\nfunction deepCyclicCopyArray(array, options, cycles) {\n  const newArray = options.keepPrototype\n    ? new (Object.getPrototypeOf(array).constructor)(array.length)\n    : [];\n  const length = array.length;\n  cycles.set(array, newArray);\n\n  for (let i = 0; i < length; i++) {\n    newArray[i] = deepCyclicCopy(\n      array[i],\n      {\n        blacklist: EMPTY,\n        keepPrototype: options.keepPrototype\n      },\n      cycles\n    );\n  }\n\n  return newArray;\n}\n"]}