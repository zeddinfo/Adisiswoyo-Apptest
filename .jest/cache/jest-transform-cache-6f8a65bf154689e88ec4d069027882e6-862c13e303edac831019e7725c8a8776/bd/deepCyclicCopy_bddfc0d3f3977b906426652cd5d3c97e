e523d6e53af102396c7529959b955143
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = deepCyclicCopy;
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var EMPTY = new Set();

function deepCyclicCopy(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    blacklist: EMPTY,
    keepPrototype: false
  };
  var cycles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new WeakMap();

  if ((0, _typeof2["default"])(value) !== 'object' || value === null) {
    return value;
  } else if (cycles.has(value)) {
    return cycles.get(value);
  } else if (Array.isArray(value)) {
    return deepCyclicCopyArray(value, options, cycles);
  } else {
    return deepCyclicCopyObject(value, options, cycles);
  }
}

function deepCyclicCopyObject(object, options, cycles) {
  var newObject = options.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};
  var descriptors = Object.getOwnPropertyDescriptors(object);
  cycles.set(object, newObject);
  Object.keys(descriptors).forEach(function (key) {
    if (options.blacklist && options.blacklist.has(key)) {
      delete descriptors[key];
      return;
    }

    var descriptor = descriptors[key];

    if (typeof descriptor.value !== 'undefined') {
      descriptor.value = deepCyclicCopy(descriptor.value, {
        blacklist: EMPTY,
        keepPrototype: options.keepPrototype
      }, cycles);
    }

    descriptor.configurable = true;
  });
  return Object.defineProperties(newObject, descriptors);
}

function deepCyclicCopyArray(array, options, cycles) {
  var newArray = options.keepPrototype ? new (Object.getPrototypeOf(array).constructor)(array.length) : [];
  var length = array.length;
  cycles.set(array, newArray);

  for (var i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopy(array[i], {
      blacklist: EMPTY,
      keepPrototype: options.keepPrototype
    }, cycles);
  }

  return newArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBDeWNsaWNDb3B5LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVlcEN5Y2xpY0NvcHkiLCJFTVBUWSIsIlNldCIsIm9wdGlvbnMiLCJibGFja2xpc3QiLCJrZWVwUHJvdG90eXBlIiwiY3ljbGVzIiwiV2Vha01hcCIsImhhcyIsImdldCIsIkFycmF5IiwiaXNBcnJheSIsImRlZXBDeWNsaWNDb3B5QXJyYXkiLCJkZWVwQ3ljbGljQ29weU9iamVjdCIsIm9iamVjdCIsIm5ld09iamVjdCIsImNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwic2V0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsImFycmF5IiwibmV3QXJyYXkiLCJjb25zdHJ1Y3RvciIsImxlbmd0aCIsImkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sV0FBUCxHQUFrQkUsY0FBbEI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBTUMsS0FBSyxHQUFHLElBQUlDLEdBQUosRUFBZDs7QUFFQSxTQUFTRixjQUFULENBQ0VELEtBREYsRUFPRTtBQUFBLE1BTEFJLE9BS0EsdUVBTFU7QUFDUkMsSUFBQUEsU0FBUyxFQUFFSCxLQURIO0FBRVJJLElBQUFBLGFBQWEsRUFBRTtBQUZQLEdBS1Y7QUFBQSxNQURBQyxNQUNBLHVFQURTLElBQUlDLE9BQUosRUFDVDs7QUFDQSxNQUFJLHlCQUFPUixLQUFQLE1BQWlCLFFBQWpCLElBQTZCQSxLQUFLLEtBQUssSUFBM0MsRUFBaUQ7QUFD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bnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZXBDeWNsaWNDb3B5O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBFTVBUWSA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gZGVlcEN5Y2xpY0NvcHkoXG4gIHZhbHVlLFxuICBvcHRpb25zID0ge1xuICAgIGJsYWNrbGlzdDogRU1QVFksXG4gICAga2VlcFByb3RvdHlwZTogZmFsc2VcbiAgfSxcbiAgY3ljbGVzID0gbmV3IFdlYWtNYXAoKVxuKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKGN5Y2xlcy5oYXModmFsdWUpKSB7XG4gICAgcmV0dXJuIGN5Y2xlcy5nZXQodmFsdWUpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGRlZXBDeWNsaWNDb3B5QXJyYXkodmFsdWUsIG9wdGlvbnMsIGN5Y2xlcyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlZXBDeWNsaWNDb3B5T2JqZWN0KHZhbHVlLCBvcHRpb25zLCBjeWNsZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZXBDeWNsaWNDb3B5T2JqZWN0KG9iamVjdCwgb3B0aW9ucywgY3ljbGVzKSB7XG4gIGNvbnN0IG5ld09iamVjdCA9IG9wdGlvbnMua2VlcFByb3RvdHlwZVxuICAgID8gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KSlcbiAgICA6IHt9O1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCk7XG4gIGN5Y2xlcy5zZXQob2JqZWN0LCBuZXdPYmplY3QpO1xuICBPYmplY3Qua2V5cyhkZXNjcmlwdG9ycykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJsYWNrbGlzdCAmJiBvcHRpb25zLmJsYWNrbGlzdC5oYXMoa2V5KSkge1xuICAgICAgZGVsZXRlIGRlc2NyaXB0b3JzW2tleV07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZGVlcEN5Y2xpY0NvcHkoXG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUsXG4gICAgICAgIHtcbiAgICAgICAgICBibGFja2xpc3Q6IEVNUFRZLFxuICAgICAgICAgIGtlZXBQcm90b3R5cGU6IG9wdGlvbnMua2VlcFByb3RvdHlwZVxuICAgICAgICB9LFxuICAgICAgICBjeWNsZXNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG5ld09iamVjdCwgZGVzY3JpcHRvcnMpO1xufVxuXG5mdW5jdGlvbiBkZWVwQ3ljbGljQ29weUFycmF5KGFycmF5LCBvcHRpb25zLCBjeWNsZXMpIHtcbiAgY29uc3QgbmV3QXJyYXkgPSBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICA/IG5ldyAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGFycmF5KS5jb25zdHJ1Y3RvcikoYXJyYXkubGVuZ3RoKVxuICAgIDogW107XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgY3ljbGVzLnNldChhcnJheSwgbmV3QXJyYXkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBuZXdBcnJheVtpXSA9IGRlZXBDeWNsaWNDb3B5KFxuICAgICAgYXJyYXlbaV0sXG4gICAgICB7XG4gICAgICAgIGJsYWNrbGlzdDogRU1QVFksXG4gICAgICAgIGtlZXBQcm90b3R5cGU6IG9wdGlvbnMua2VlcFByb3RvdHlwZVxuICAgICAgfSxcbiAgICAgIGN5Y2xlc1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gbmV3QXJyYXk7XG59XG4iXX0=