4969eec20dbc9dbc7bcbb1fd63ffd79a
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
'use strict';

_getJestObj().mock('../Libraries/Core/InitializeCore', function () {}).mock('../Libraries/Core/NativeExceptionsManager', function () {
  return {
    __esModule: true,
    "default": {
      reportException: jest.fn()
    }
  };
}).mock('../Libraries/ReactNative/UIManager', function () {
  return {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn()
      }
    },
    blur: jest.fn(),
    createView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    getViewManagerConfig: jest.fn(function (name) {
      if (name === 'AndroidDrawerLayout') {
        return {
          Constants: {
            DrawerPosition: {
              Left: 10
            }
          }
        };
      }
    }),
    hasViewManagerConfig: jest.fn(function (name) {
      return true;
    }),
    measure: jest.fn(),
    manageChildren: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    setChildren: jest.fn(),
    updateView: jest.fn(),
    AndroidDrawerLayout: {
      Constants: {
        DrawerPosition: {
          Left: 10
        }
      }
    },
    AndroidTextInput: {
      Commands: {}
    },
    ScrollView: {
      Constants: {}
    },
    View: {
      Constants: {}
    }
  };
}).mock('../Libraries/Image/Image', function () {
  return mockComponent('../Libraries/Image/Image');
}).mock('../Libraries/Text/Text', function () {
  return mockComponent('../Libraries/Text/Text', MockNativeMethods);
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return mockComponent('../Libraries/Components/TextInput/TextInput', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    isFocused: jest.fn(),
    clear: jest.fn(),
    getNativeRef: jest.fn()
  }));
}).mock('../Libraries/Modal/Modal', function () {
  return mockComponent('../Libraries/Modal/Modal');
}).mock('../Libraries/Components/View/View', function () {
  return mockComponent('../Libraries/Components/View/View', MockNativeMethods);
}).mock('../Libraries/Components/AccessibilityInfo/AccessibilityInfo', function () {
  return {
    __esModule: true,
    "default": {
      addEventListener: jest.fn(),
      announceForAccessibility: jest.fn(),
      isBoldTextEnabled: jest.fn(),
      isGrayscaleEnabled: jest.fn(),
      isInvertColorsEnabled: jest.fn(),
      isReduceMotionEnabled: jest.fn(),
      isReduceTransparencyEnabled: jest.fn(),
      isScreenReaderEnabled: jest.fn(function () {
        return Promise.resolve(false);
      }),
      removeEventListener: jest.fn(),
      setAccessibilityFocus: jest.fn(),
      sendAccessibilityEvent_unstable: jest.fn(),
      getRecommendedTimeoutMillis: jest.fn()
    }
  };
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return jest.requireActual('../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock');
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  var baseComponent = mockComponent('../Libraries/Components/ScrollView/ScrollView', _objectSpread(_objectSpread({}, MockNativeMethods), {}, {
    getScrollResponder: jest.fn(),
    getScrollableNode: jest.fn(),
    getInnerViewNode: jest.fn(),
    getInnerViewRef: jest.fn(),
    getNativeScrollRef: jest.fn(),
    scrollTo: jest.fn(),
    scrollToEnd: jest.fn(),
    flashScrollIndicators: jest.fn(),
    scrollResponderZoomTo: jest.fn(),
    scrollResponderScrollNativeHandleToKeyboard: jest.fn()
  }));
  var mockScrollView = jest.requireActual('./mockScrollView');
  return mockScrollView(baseComponent);
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator');
}).mock('../Libraries/AppState/AppState', function () {
  return {
    addEventListener: jest.fn(function () {
      return {
        remove: jest.fn()
      };
    })
  };
}).mock('../Libraries/Linking/Linking', function () {
  return {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    openSettings: jest.fn(),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {
      return Promise.resolve();
    }),
    removeEventListener: jest.fn(),
    sendIntent: jest.fn()
  };
}) // Mock modules defined by the native layer (ex: Objective-C, Java)
.mock('../Libraries/BatchedBridge/NativeModules', function () {
  return {
    AlertManager: {
      alertWithArgs: jest.fn()
    },
    AsyncLocalStorage: {
      multiGet: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      }),
      multiSet: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiRemove: jest.fn(function (keys, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      multiMerge: jest.fn(function (entries, callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      clear: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null);
        });
      }),
      getAllKeys: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(null, []);
        });
      })
    },
    Clipboard: {
      getString: jest.fn(function () {
        return '';
      }),
      setString: jest.fn()
    },
    DeviceInfo: {
      getConstants: function getConstants() {
        return {
          Dimensions: {
            window: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            },
            screen: {
              fontScale: 2,
              height: 1334,
              scale: 2,
              width: 750
            }
          }
        };
      }
    },
    DevSettings: {
      addMenuItem: jest.fn(),
      reload: jest.fn()
    },
    ImageLoader: {
      getSize: jest.fn(function (url) {
        return Promise.resolve({
          width: 320,
          height: 240
        });
      }),
      prefetchImage: jest.fn()
    },
    ImageViewManager: {
      getSize: jest.fn(function (uri, success) {
        return process.nextTick(function () {
          return success(320, 240);
        });
      }),
      prefetchImage: jest.fn()
    },
    KeyboardObserver: {
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    Networking: {
      sendRequest: jest.fn(),
      abortRequest: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    PlatformConstants: {
      getConstants: function getConstants() {
        return {};
      }
    },
    PushNotificationManager: {
      presentLocalNotification: jest.fn(),
      scheduleLocalNotification: jest.fn(),
      cancelAllLocalNotifications: jest.fn(),
      removeAllDeliveredNotifications: jest.fn(),
      getDeliveredNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return [];
        });
      }),
      removeDeliveredNotifications: jest.fn(),
      setApplicationIconBadgeNumber: jest.fn(),
      getApplicationIconBadgeNumber: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback(0);
        });
      }),
      cancelLocalNotifications: jest.fn(),
      getScheduledLocalNotifications: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback();
        });
      }),
      requestPermissions: jest.fn(function () {
        return Promise.resolve({
          alert: true,
          badge: true,
          sound: true
        });
      }),
      abandonPermissions: jest.fn(),
      checkPermissions: jest.fn(function (callback) {
        return process.nextTick(function () {
          return callback({
            alert: true,
            badge: true,
            sound: true
          });
        });
      }),
      getInitialNotification: jest.fn(function () {
        return Promise.resolve(null);
      }),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    SourceCode: {
      getConstants: function getConstants() {
        return {
          scriptURL: null
        };
      }
    },
    StatusBarManager: {
      setColor: jest.fn(),
      setStyle: jest.fn(),
      setHidden: jest.fn(),
      setNetworkActivityIndicatorVisible: jest.fn(),
      setBackgroundColor: jest.fn(),
      setTranslucent: jest.fn(),
      getConstants: function getConstants() {
        return {
          HEIGHT: 42
        };
      }
    },
    Timing: {
      createTimer: jest.fn(),
      deleteTimer: jest.fn()
    },
    UIManager: {},
    BlobModule: {
      getConstants: function getConstants() {
        return {
          BLOB_URI_SCHEME: 'content',
          BLOB_URI_HOST: null
        };
      },
      addNetworkingHandler: jest.fn(),
      enableBlobSupport: jest.fn(),
      disableBlobSupport: jest.fn(),
      createFromParts: jest.fn(),
      sendBlob: jest.fn(),
      release: jest.fn()
    },
    WebSocketModule: {
      connect: jest.fn(),
      send: jest.fn(),
      sendBinary: jest.fn(),
      ping: jest.fn(),
      close: jest.fn(),
      addListener: jest.fn(),
      removeListeners: jest.fn()
    },
    I18nManager: {
      allowRTL: jest.fn(),
      forceRTL: jest.fn(),
      swapLeftAndRightInRTL: jest.fn(),
      getConstants: function getConstants() {
        return {
          isRTL: false,
          doLeftAndRightSwapInRTL: true
        };
      }
    }
  };
}).mock('../Libraries/NativeComponent/NativeComponentRegistry', function () {
  return {
    get: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual('./mockNativeComponent')(name);
    }),
    getWithFallback_DEPRECATED: jest.fn(function (name, viewConfigProvider) {
      return jest.requireActual('./mockNativeComponent')(name);
    }),
    setRuntimeConfigProvider: jest.fn()
  };
}).mock('../Libraries/ReactNative/requireNativeComponent', function () {
  return jest.requireActual('./mockNativeComponent');
}).mock('../Libraries/Utilities/verifyComponentAttributeEquivalence', function () {
  return function () {};
}).mock('../Libraries/Components/View/ViewNativeComponent', function () {
  var React = require('react');

  var Component = /*#__PURE__*/function (_React$Component) {
    _inherits(Component, _React$Component);

    var _super = _createSuper(Component);

    function Component() {
      _classCallCheck(this, Component);

      return _super.apply(this, arguments);
    }

    _createClass(Component, [{
      key: "render",
      value: function render() {
        return React.createElement('View', this.props, this.props.children);
      }
    }]);

    return Component;
  }(React.Component);

  Component.displayName = 'View';
  return {
    __esModule: true,
    "default": Component
  };
});

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

var MockNativeMethods = jest.requireActual('./MockNativeMethods');
var mockComponent = jest.requireActual('./mockComponent');
jest.requireActual('@react-native/polyfills/Object.es7');
jest.requireActual('@react-native/polyfills/error-guard');
global.__DEV__ = true;
global.performance = {
  now: jest.fn(Date.now)
};
global.Promise = jest.requireActual('promise');
global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');

global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};

global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
}; // there's a __mock__ for it.


jest.setMock('../Libraries/vendor/core/ErrorUtils', require('../Libraries/vendor/core/ErrorUtils'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sIm5hbWVzIjpbIm1vY2siLCJfX2VzTW9kdWxlIiwicmVwb3J0RXhjZXB0aW9uIiwiamVzdCIsImZuIiwiQW5kcm9pZFZpZXdQYWdlciIsIkNvbW1hbmRzIiwic2V0UGFnZSIsInNldFBhZ2VXaXRob3V0QW5pbWF0aW9uIiwiYmx1ciIsImNyZWF0ZVZpZXciLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJmb2N1cyIsImdldFZpZXdNYW5hZ2VyQ29uZmlnIiwibmFtZSIsIkNvbnN0YW50cyIsIkRyYXdlclBvc2l0aW9uIiwiTGVmdCIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIiwibWVhc3VyZSIsIm1hbmFnZUNoaWxkcmVuIiwicmVtb3ZlU3Vidmlld3NGcm9tQ29udGFpbmVyV2l0aElEIiwicmVwbGFjZUV4aXN0aW5nTm9uUm9vdFZpZXciLCJzZXRDaGlsZHJlbiIsInVwZGF0ZVZpZXciLCJBbmRyb2lkRHJhd2VyTGF5b3V0IiwiQW5kcm9pZFRleHRJbnB1dCIsIlNjcm9sbFZpZXciLCJWaWV3IiwibW9ja0NvbXBvbmVudCIsIk1vY2tOYXRpdmVNZXRob2RzIiwiaXNGb2N1c2VkIiwiY2xlYXIiLCJnZXROYXRpdmVSZWYiLCJhZGRFdmVudExpc3RlbmVyIiwiYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5IiwiaXNCb2xkVGV4dEVuYWJsZWQiLCJpc0dyYXlzY2FsZUVuYWJsZWQiLCJpc0ludmVydENvbG9yc0VuYWJsZWQiLCJpc1JlZHVjZU1vdGlvbkVuYWJsZWQiLCJpc1JlZHVjZVRyYW5zcGFyZW5jeUVuYWJsZWQiLCJpc1NjcmVlblJlYWRlckVuYWJsZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRBY2Nlc3NpYmlsaXR5Rm9jdXMiLCJzZW5kQWNjZXNzaWJpbGl0eUV2ZW50X3Vuc3RhYmxlIiwiZ2V0UmVjb21tZW5kZWRUaW1lb3V0TWlsbGlzIiwicmVxdWlyZUFjdHVhbCIsImJhc2VDb21wb25lbnQiLCJnZXRTY3JvbGxSZXNwb25kZXIiLCJnZXRTY3JvbGxhYmxlTm9kZSIsImdldElubmVyVmlld05vZGUiLCJnZXRJbm5lclZpZXdSZWYiLCJnZXROYXRpdmVTY3JvbGxSZWYiLCJzY3JvbGxUbyIsInNjcm9sbFRvRW5kIiwiZmxhc2hTY3JvbGxJbmRpY2F0b3JzIiwic2Nyb2xsUmVzcG9uZGVyWm9vbVRvIiwic2Nyb2xsUmVzcG9uZGVyU2Nyb2xsTmF0aXZlSGFuZGxlVG9LZXlib2FyZCIsIm1vY2tTY3JvbGxWaWV3IiwicmVtb3ZlIiwib3BlblVSTCIsImNhbk9wZW5VUkwiLCJvcGVuU2V0dGluZ3MiLCJnZXRJbml0aWFsVVJMIiwic2VuZEludGVudCIsIkFsZXJ0TWFuYWdlciIsImFsZXJ0V2l0aEFyZ3MiLCJBc3luY0xvY2FsU3RvcmFnZSIsIm11bHRpR2V0Iiwia2V5cyIsImNhbGxiYWNrIiwicHJvY2VzcyIsIm5leHRUaWNrIiwibXVsdGlTZXQiLCJlbnRyaWVzIiwibXVsdGlSZW1vdmUiLCJtdWx0aU1lcmdlIiwiZ2V0QWxsS2V5cyIsIkNsaXBib2FyZCIsImdldFN0cmluZyIsInNldFN0cmluZyIsIkRldmljZUluZm8iLCJnZXRDb25zdGFudHMiLCJEaW1lbnNpb25zIiwid2luZG93IiwiZm9udFNjYWxlIiwiaGVpZ2h0Iiwic2NhbGUiLCJ3aWR0aCIsInNjcmVlbiIsIkRldlNldHRpbmdzIiwiYWRkTWVudUl0ZW0iLCJyZWxvYWQiLCJJbWFnZUxvYWRlciIsImdldFNpemUiLCJ1cmwiLCJwcmVmZXRjaEltYWdlIiwiSW1hZ2VWaWV3TWFuYWdlciIsInVyaSIsInN1Y2Nlc3MiLCJLZXlib2FyZE9ic2VydmVyIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lcnMiLCJOZXR3b3JraW5nIiwic2VuZFJlcXVlc3QiLCJhYm9ydFJlcXVlc3QiLCJQbGF0Zm9ybUNvbnN0YW50cyIsIlB1c2hOb3RpZmljYXRpb25NYW5hZ2VyIiwicHJlc2VudExvY2FsTm90aWZpY2F0aW9uIiwic2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbiIsImNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9ucyIsInJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMiLCJnZXREZWxpdmVyZWROb3RpZmljYXRpb25zIiwicmVtb3ZlRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsInNldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyIiwiZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnMiLCJnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnMiLCJyZXF1ZXN0UGVybWlzc2lvbnMiLCJhbGVydCIsImJhZGdlIiwic291bmQiLCJhYmFuZG9uUGVybWlzc2lvbnMiLCJjaGVja1Blcm1pc3Npb25zIiwiZ2V0SW5pdGlhbE5vdGlmaWNhdGlvbiIsIlNvdXJjZUNvZGUiLCJzY3JpcHRVUkwiLCJTdGF0dXNCYXJNYW5hZ2VyIiwic2V0Q29sb3IiLCJzZXRTdHlsZSIsInNldEhpZGRlbiIsInNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJzZXRUcmFuc2x1Y2VudCIsIkhFSUdIVCIsIlRpbWluZyIsImNyZWF0ZVRpbWVyIiwiZGVsZXRlVGltZXIiLCJVSU1hbmFnZXIiLCJCbG9iTW9kdWxlIiwiQkxPQl9VUklfU0NIRU1FIiwiQkxPQl9VUklfSE9TVCIsImFkZE5ldHdvcmtpbmdIYW5kbGVyIiwiZW5hYmxlQmxvYlN1cHBvcnQiLCJkaXNhYmxlQmxvYlN1cHBvcnQiLCJjcmVhdGVGcm9tUGFydHMiLCJzZW5kQmxvYiIsInJlbGVhc2UiLCJXZWJTb2NrZXRNb2R1bGUiLCJjb25uZWN0Iiwic2VuZCIsInNlbmRCaW5hcnkiLCJwaW5nIiwiY2xvc2UiLCJJMThuTWFuYWdlciIsImFsbG93UlRMIiwiZm9yY2VSVEwiLCJzd2FwTGVmdEFuZFJpZ2h0SW5SVEwiLCJpc1JUTCIsImRvTGVmdEFuZFJpZ2h0U3dhcEluUlRMIiwiZ2V0Iiwidmlld0NvbmZpZ1Byb3ZpZGVyIiwiZ2V0V2l0aEZhbGxiYWNrX0RFUFJFQ0FURUQiLCJzZXRSdW50aW1lQ29uZmlnUHJvdmlkZXIiLCJSZWFjdCIsInJlcXVpcmUiLCJDb21wb25lbnQiLCJjcmVhdGVFbGVtZW50IiwicHJvcHMiLCJjaGlsZHJlbiIsImRpc3BsYXlOYW1lIiwiZ2xvYmFsIiwiX19ERVZfXyIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwiY2xlYXJUaW1lb3V0Iiwic2V0TW9jayJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQThCQSxjQUNHQSxJQURILENBQ1Esa0NBRFIsRUFDNEMsWUFBTSxDQUFFLENBRHBELEVBRUdBLElBRkgsQ0FFUSwyQ0FGUixFQUVxRDtBQUFBLFNBQU87QUFDeERDLElBQUFBLFVBQVUsRUFBRSxJQUQ0QztBQUV4RCxlQUFTO0FBQ1BDLE1BQUFBLGVBQWUsRUFBRUMsSUFBSSxDQUFDQyxFQUFMO0FBRFY7QUFGK0MsR0FBUDtBQUFBLENBRnJELEVBUUdKLElBUkgsQ0FRUSxvQ0FSUixFQVE4QztBQUFBLFNBQU87QUFDakRLLElBQUFBLGdCQUFnQixFQUFFO0FBQ2hCQyxNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsT0FBTyxFQUFFSixJQUFJLENBQUNDLEVBQUwsRUFERDtBQUVSSSxRQUFBQSx1QkFBdUIsRUFBRUwsSUFBSSxDQUFDQyxFQUFMO0FBRmpCO0FBRE0sS0FEK0I7QUFPakRLLElBQUFBLElBQUksRUFBRU4sSUFBSSxDQUFDQyxFQUFMLEVBUDJDO0FBUWpETSxJQUFBQSxVQUFVLEVBQUVQLElBQUksQ0FBQ0MsRUFBTCxF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RCxDLENBSUE7OztBQUNBckwsSUFBSSxDQUFDdUwsT0FBTCxDQUNFLHFDQURGLEVBRUVqQixPQUFPLENBQUMscUNBQUQsQ0FGVCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9ja05hdGl2ZU1ldGhvZHMgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vTW9ja05hdGl2ZU1ldGhvZHMnKTtcbmNvbnN0IG1vY2tDb21wb25lbnQgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vbW9ja0NvbXBvbmVudCcpO1xuXG5qZXN0LnJlcXVpcmVBY3R1YWwoJ0ByZWFjdC1uYXRpdmUvcG9seWZpbGxzL09iamVjdC5lczcnKTtcbmplc3QucmVxdWlyZUFjdHVhbCgnQHJlYWN0LW5hdGl2ZS9wb2x5ZmlsbHMvZXJyb3ItZ3VhcmQnKTtcblxuZ2xvYmFsLl9fREVWX18gPSB0cnVlO1xuXG5nbG9iYWwucGVyZm9ybWFuY2UgPSB7XG4gIG5vdzogamVzdC5mbihEYXRlLm5vdyksXG59O1xuXG5nbG9iYWwuUHJvbWlzZSA9IGplc3QucmVxdWlyZUFjdHVhbCgncHJvbWlzZScpO1xuZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJyk7XG5cbmdsb2JhbC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG59O1xuZ2xvYmFsLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgY2xlYXJUaW1lb3V0KGlkKTtcbn07XG5cbi8vIHRoZXJlJ3MgYSBfX21vY2tfXyBmb3IgaXQuXG5qZXN0LnNldE1vY2soXG4gICcuLi9MaWJyYXJpZXMvdmVuZG9yL2NvcmUvRXJyb3JVdGlscycsXG4gIHJlcXVpcmUoJy4uL0xpYnJhcmllcy92ZW5kb3IvY29yZS9FcnJvclV0aWxzJyksXG4pO1xuXG5qZXN0XG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29yZS9Jbml0aWFsaXplQ29yZScsICgpID0+IHt9KVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvcmUvTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInLCAoKSA9PiAoe1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDoge1xuICAgICAgcmVwb3J0RXhjZXB0aW9uOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgfSkpXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJywgKCkgPT4gKHtcbiAgICBBbmRyb2lkVmlld1BhZ2VyOiB7XG4gICAgICBDb21tYW5kczoge1xuICAgICAgICBzZXRQYWdlOiBqZXN0LmZuKCksXG4gICAgICAgIHNldFBhZ2VXaXRob3V0QW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgIH0sXG4gICAgYmx1cjogamVzdC5mbigpLFxuICAgIGNyZWF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXM6IHt9LFxuICAgIGN1c3RvbURpcmVjdEV2ZW50VHlwZXM6IHt9LFxuICAgIGRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kOiBqZXN0LmZuKCksXG4gICAgZm9jdXM6IGplc3QuZm4oKSxcbiAgICBnZXRWaWV3TWFuYWdlckNvbmZpZzogamVzdC5mbihuYW1lID0+IHtcbiAgICAgIGlmIChuYW1lID09PSAnQW5kcm9pZERyYXdlckxheW91dCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBDb25zdGFudHM6IHtcbiAgICAgICAgICAgIERyYXdlclBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgIExlZnQ6IDEwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pLFxuICAgIGhhc1ZpZXdNYW5hZ2VyQ29uZmlnOiBqZXN0LmZuKG5hbWUgPT4ge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSksXG4gICAgbWVhc3VyZTogamVzdC5mbigpLFxuICAgIG1hbmFnZUNoaWxkcmVuOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlU3Vidmlld3NGcm9tQ29udGFpbmVyV2l0aElEOiBqZXN0LmZuKCksXG4gICAgcmVwbGFjZUV4aXN0aW5nTm9uUm9vdFZpZXc6IGplc3QuZm4oKSxcbiAgICBzZXRDaGlsZHJlbjogamVzdC5mbigpLFxuICAgIHVwZGF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICBBbmRyb2lkRHJhd2VyTGF5b3V0OiB7XG4gICAgICBDb25zdGFudHM6IHtcbiAgICAgICAgRHJhd2VyUG9zaXRpb246IHtcbiAgICAgICAgICBMZWZ0OiAxMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBBbmRyb2lkVGV4dElucHV0OiB7XG4gICAgICBDb21tYW5kczoge30sXG4gICAgfSxcbiAgICBTY3JvbGxWaWV3OiB7XG4gICAgICBDb25zdGFudHM6IHt9LFxuICAgIH0sXG4gICAgVmlldzoge1xuICAgICAgQ29uc3RhbnRzOiB7fSxcbiAgICB9LFxuICB9KSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9JbWFnZS9JbWFnZScsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL0ltYWdlL0ltYWdlJyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9UZXh0L1RleHQnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9UZXh0L1RleHQnLCBNb2NrTmF0aXZlTWV0aG9kcyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1RleHRJbnB1dC9UZXh0SW5wdXQnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1RleHRJbnB1dC9UZXh0SW5wdXQnLCB7XG4gICAgICAuLi5Nb2NrTmF0aXZlTWV0aG9kcyxcbiAgICAgIGlzRm9jdXNlZDogamVzdC5mbigpLFxuICAgICAgY2xlYXI6IGplc3QuZm4oKSxcbiAgICAgIGdldE5hdGl2ZVJlZjogamVzdC5mbigpLFxuICAgIH0pLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvTW9kYWwvTW9kYWwnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9Nb2RhbC9Nb2RhbCcpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXcnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldycsIE1vY2tOYXRpdmVNZXRob2RzKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWNjZXNzaWJpbGl0eUluZm8vQWNjZXNzaWJpbGl0eUluZm8nLCAoKSA9PiAoe1xuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgZGVmYXVsdDoge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgYW5ub3VuY2VGb3JBY2Nlc3NpYmlsaXR5OiBqZXN0LmZuKCksXG4gICAgICBpc0JvbGRUZXh0RW5hYmxlZDogamVzdC5mbigpLFxuICAgICAgaXNHcmF5c2NhbGVFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgICBpc0ludmVydENvbG9yc0VuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICAgIGlzUmVkdWNlTW90aW9uRW5hYmxlZDogamVzdC5mbigpLFxuICAgICAgaXNSZWR1Y2VUcmFuc3BhcmVuY3lFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgICBpc1NjcmVlblJlYWRlckVuYWJsZWQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKSksXG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICBzZXRBY2Nlc3NpYmlsaXR5Rm9jdXM6IGplc3QuZm4oKSxcbiAgICAgIHNlbmRBY2Nlc3NpYmlsaXR5RXZlbnRfdW5zdGFibGU6IGplc3QuZm4oKSxcbiAgICAgIGdldFJlY29tbWVuZGVkVGltZW91dE1pbGxpczogamVzdC5mbigpLFxuICAgIH0sXG4gIH0pKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnLCAoKSA9PlxuICAgIGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9SZWZyZXNoQ29udHJvbC9fX21vY2tzX18vUmVmcmVzaENvbnRyb2xNb2NrJyxcbiAgICApLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnLCAoKSA9PiB7XG4gICAgY29uc3QgYmFzZUNvbXBvbmVudCA9IG1vY2tDb21wb25lbnQoXG4gICAgICAnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3JyxcbiAgICAgIHtcbiAgICAgICAgLi4uTW9ja05hdGl2ZU1ldGhvZHMsXG4gICAgICAgIGdldFNjcm9sbFJlc3BvbmRlcjogamVzdC5mbigpLFxuICAgICAgICBnZXRTY3JvbGxhYmxlTm9kZTogamVzdC5mbigpLFxuICAgICAgICBnZXRJbm5lclZpZXdOb2RlOiBqZXN0LmZuKCksXG4gICAgICAgIGdldElubmVyVmlld1JlZjogamVzdC5mbigpLFxuICAgICAgICBnZXROYXRpdmVTY3JvbGxSZWY6IGplc3QuZm4oKSxcbiAgICAgICAgc2Nyb2xsVG86IGplc3QuZm4oKSxcbiAgICAgICAgc2Nyb2xsVG9FbmQ6IGplc3QuZm4oKSxcbiAgICAgICAgZmxhc2hTY3JvbGxJbmRpY2F0b3JzOiBqZXN0LmZuKCksXG4gICAgICAgIHNjcm9sbFJlc3BvbmRlclpvb21UbzogamVzdC5mbigpLFxuICAgICAgICBzY3JvbGxSZXNwb25kZXJTY3JvbGxOYXRpdmVIYW5kbGVUb0tleWJvYXJkOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgICk7XG4gICAgY29uc3QgbW9ja1Njcm9sbFZpZXcgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vbW9ja1Njcm9sbFZpZXcnKTtcbiAgICByZXR1cm4gbW9ja1Njcm9sbFZpZXcoYmFzZUNvbXBvbmVudCk7XG4gIH0pXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY3Rpdml0eUluZGljYXRvci9BY3Rpdml0eUluZGljYXRvcicsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY3Rpdml0eUluZGljYXRvci9BY3Rpdml0eUluZGljYXRvcicsXG4gICAgKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0FwcFN0YXRlL0FwcFN0YXRlJywgKCkgPT4gKHtcbiAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICByZW1vdmU6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gIH0pKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0xpbmtpbmcvTGlua2luZycsICgpID0+ICh7XG4gICAgb3BlblVSTDogamVzdC5mbigpLFxuICAgIGNhbk9wZW5VUkw6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRydWUpKSxcbiAgICBvcGVuU2V0dGluZ3M6IGplc3QuZm4oKSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZ2V0SW5pdGlhbFVSTDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHNlbmRJbnRlbnQ6IGplc3QuZm4oKSxcbiAgfSkpXG4gIC8vIE1vY2sgbW9kdWxlcyBkZWZpbmVkIGJ5IHRoZSBuYXRpdmUgbGF5ZXIgKGV4OiBPYmplY3RpdmUtQywgSmF2YSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9CYXRjaGVkQnJpZGdlL05hdGl2ZU1vZHVsZXMnLCAoKSA9PiAoe1xuICAgIEFsZXJ0TWFuYWdlcjoge1xuICAgICAgYWxlcnRXaXRoQXJnczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgQXN5bmNMb2NhbFN0b3JhZ2U6IHtcbiAgICAgIG11bHRpR2V0OiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsLCBbXSkpLFxuICAgICAgKSxcbiAgICAgIG11bHRpU2V0OiBqZXN0LmZuKChlbnRyaWVzLCBjYWxsYmFjaykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSksXG4gICAgICApLFxuICAgICAgbXVsdGlSZW1vdmU6IGplc3QuZm4oKGtleXMsIGNhbGxiYWNrKSA9PlxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKG51bGwpKSxcbiAgICAgICksXG4gICAgICBtdWx0aU1lcmdlOiBqZXN0LmZuKChlbnRyaWVzLCBjYWxsYmFjaykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSksXG4gICAgICApLFxuICAgICAgY2xlYXI6IGplc3QuZm4oY2FsbGJhY2sgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSkpLFxuICAgICAgZ2V0QWxsS2V5czogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKG51bGwsIFtdKSksXG4gICAgICApLFxuICAgIH0sXG4gICAgQ2xpcGJvYXJkOiB7XG4gICAgICBnZXRTdHJpbmc6IGplc3QuZm4oKCkgPT4gJycpLFxuICAgICAgc2V0U3RyaW5nOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBEZXZpY2VJbmZvOiB7XG4gICAgICBnZXRDb25zdGFudHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgRGltZW5zaW9uczoge1xuICAgICAgICAgICAgd2luZG93OiB7XG4gICAgICAgICAgICAgIGZvbnRTY2FsZTogMixcbiAgICAgICAgICAgICAgaGVpZ2h0OiAxMzM0LFxuICAgICAgICAgICAgICBzY2FsZTogMixcbiAgICAgICAgICAgICAgd2lkdGg6IDc1MCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzY3JlZW46IHtcbiAgICAgICAgICAgICAgZm9udFNjYWxlOiAyLFxuICAgICAgICAgICAgICBoZWlnaHQ6IDEzMzQsXG4gICAgICAgICAgICAgIHNjYWxlOiAyLFxuICAgICAgICAgICAgICB3aWR0aDogNzUwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9LFxuICAgIERldlNldHRpbmdzOiB7XG4gICAgICBhZGRNZW51SXRlbTogamVzdC5mbigpLFxuICAgICAgcmVsb2FkOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBJbWFnZUxvYWRlcjoge1xuICAgICAgZ2V0U2l6ZTogamVzdC5mbih1cmwgPT4gUHJvbWlzZS5yZXNvbHZlKHt3aWR0aDogMzIwLCBoZWlnaHQ6IDI0MH0pKSxcbiAgICAgIHByZWZldGNoSW1hZ2U6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIEltYWdlVmlld01hbmFnZXI6IHtcbiAgICAgIGdldFNpemU6IGplc3QuZm4oKHVyaSwgc3VjY2VzcykgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBzdWNjZXNzKDMyMCwgMjQwKSksXG4gICAgICApLFxuICAgICAgcHJlZmV0Y2hJbWFnZTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgS2V5Ym9hcmRPYnNlcnZlcjoge1xuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgTmV0d29ya2luZzoge1xuICAgICAgc2VuZFJlcXVlc3Q6IGplc3QuZm4oKSxcbiAgICAgIGFib3J0UmVxdWVzdDogamVzdC5mbigpLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgUGxhdGZvcm1Db25zdGFudHM6IHtcbiAgICAgIGdldENvbnN0YW50cygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSxcbiAgICB9LFxuICAgIFB1c2hOb3RpZmljYXRpb25NYW5hZ2VyOiB7XG4gICAgICBwcmVzZW50TG9jYWxOb3RpZmljYXRpb246IGplc3QuZm4oKSxcbiAgICAgIHNjaGVkdWxlTG9jYWxOb3RpZmljYXRpb246IGplc3QuZm4oKSxcbiAgICAgIGNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgICAgZ2V0RGVsaXZlcmVkTm90aWZpY2F0aW9uczogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IFtdKSxcbiAgICAgICksXG4gICAgICByZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgICBzZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcjogamVzdC5mbigpLFxuICAgICAgZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXI6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjaygwKSksXG4gICAgICApLFxuICAgICAgY2FuY2VsTG9jYWxOb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgICBnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjaygpKSxcbiAgICAgICksXG4gICAgICByZXF1ZXN0UGVybWlzc2lvbnM6IGplc3QuZm4oKCkgPT5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHthbGVydDogdHJ1ZSwgYmFkZ2U6IHRydWUsIHNvdW5kOiB0cnVlfSksXG4gICAgICApLFxuICAgICAgYWJhbmRvblBlcm1pc3Npb25zOiBqZXN0LmZuKCksXG4gICAgICBjaGVja1Blcm1pc3Npb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT5cbiAgICAgICAgICBjYWxsYmFjayh7YWxlcnQ6IHRydWUsIGJhZGdlOiB0cnVlLCBzb3VuZDogdHJ1ZX0pLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICAgIGdldEluaXRpYWxOb3RpZmljYXRpb246IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcbiAgICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIFNvdXJjZUNvZGU6IHtcbiAgICAgIGdldENvbnN0YW50cygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzY3JpcHRVUkw6IG51bGwsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0sXG4gICAgU3RhdHVzQmFyTWFuYWdlcjoge1xuICAgICAgc2V0Q29sb3I6IGplc3QuZm4oKSxcbiAgICAgIHNldFN0eWxlOiBqZXN0LmZuKCksXG4gICAgICBzZXRIaWRkZW46IGplc3QuZm4oKSxcbiAgICAgIHNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGU6IGplc3QuZm4oKSxcbiAgICAgIHNldEJhY2tncm91bmRDb2xvcjogamVzdC5mbigpLFxuICAgICAgc2V0VHJhbnNsdWNlbnQ6IGplc3QuZm4oKSxcbiAgICAgIGdldENvbnN0YW50czogKCkgPT4gKHtcbiAgICAgICAgSEVJR0hUOiA0MixcbiAgICAgIH0pLFxuICAgIH0sXG4gICAgVGltaW5nOiB7XG4gICAgICBjcmVhdGVUaW1lcjogamVzdC5mbigpLFxuICAgICAgZGVsZXRlVGltZXI6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIFVJTWFuYWdlcjoge30sXG4gICAgQmxvYk1vZHVsZToge1xuICAgICAgZ2V0Q29uc3RhbnRzOiAoKSA9PiAoe0JMT0JfVVJJX1NDSEVNRTogJ2NvbnRlbnQnLCBCTE9CX1VSSV9IT1NUOiBudWxsfSksXG4gICAgICBhZGROZXR3b3JraW5nSGFuZGxlcjogamVzdC5mbigpLFxuICAgICAgZW5hYmxlQmxvYlN1cHBvcnQ6IGplc3QuZm4oKSxcbiAgICAgIGRpc2FibGVCbG9iU3VwcG9ydDogamVzdC5mbigpLFxuICAgICAgY3JlYXRlRnJvbVBhcnRzOiBqZXN0LmZuKCksXG4gICAgICBzZW5kQmxvYjogamVzdC5mbigpLFxuICAgICAgcmVsZWFzZTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgV2ViU29ja2V0TW9kdWxlOiB7XG4gICAgICBjb25uZWN0OiBqZXN0LmZuKCksXG4gICAgICBzZW5kOiBqZXN0LmZuKCksXG4gICAgICBzZW5kQmluYXJ5OiBqZXN0LmZuKCksXG4gICAgICBwaW5nOiBqZXN0LmZuKCksXG4gICAgICBjbG9zZTogamVzdC5mbigpLFxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIH0sXG4gICAgSTE4bk1hbmFnZXI6IHtcbiAgICAgIGFsbG93UlRMOiBqZXN0LmZuKCksXG4gICAgICBmb3JjZVJUTDogamVzdC5mbigpLFxuICAgICAgc3dhcExlZnRBbmRSaWdodEluUlRMOiBqZXN0LmZuKCksXG4gICAgICBnZXRDb25zdGFudHM6ICgpID0+ICh7XG4gICAgICAgIGlzUlRMOiBmYWxzZSxcbiAgICAgICAgZG9MZWZ0QW5kUmlnaHRTd2FwSW5SVEw6IHRydWUsXG4gICAgICB9KSxcbiAgICB9LFxuICB9KSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9OYXRpdmVDb21wb25lbnQvTmF0aXZlQ29tcG9uZW50UmVnaXN0cnknLCAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldDogamVzdC5mbigobmFtZSwgdmlld0NvbmZpZ1Byb3ZpZGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vbW9ja05hdGl2ZUNvbXBvbmVudCcpKG5hbWUpO1xuICAgICAgfSksXG4gICAgICBnZXRXaXRoRmFsbGJhY2tfREVQUkVDQVRFRDogamVzdC5mbigobmFtZSwgdmlld0NvbmZpZ1Byb3ZpZGVyKSA9PiB7XG4gICAgICAgIHJldHVybiBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vbW9ja05hdGl2ZUNvbXBvbmVudCcpKG5hbWUpO1xuICAgICAgfSksXG4gICAgICBzZXRSdW50aW1lQ29uZmlnUHJvdmlkZXI6IGplc3QuZm4oKSxcbiAgICB9O1xuICB9KVxuICAubW9jaygnLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgcmV0dXJuIGplc3QucmVxdWlyZUFjdHVhbCgnLi9tb2NrTmF0aXZlQ29tcG9uZW50Jyk7XG4gIH0pXG4gIC5tb2NrKFxuICAgICcuLi9MaWJyYXJpZXMvVXRpbGl0aWVzL3ZlcmlmeUNvbXBvbmVudEF0dHJpYnV0ZUVxdWl2YWxlbmNlJyxcbiAgICAoKSA9PiBmdW5jdGlvbigpIHt9LFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXdOYXRpdmVDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuICAgIGNvbnN0IENvbXBvbmVudCA9IGNsYXNzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ1ZpZXcnLCB0aGlzLnByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ1ZpZXcnO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgICBkZWZhdWx0OiBDb21wb25lbnQsXG4gICAgfTtcbiAgfSk7XG4iXX0=