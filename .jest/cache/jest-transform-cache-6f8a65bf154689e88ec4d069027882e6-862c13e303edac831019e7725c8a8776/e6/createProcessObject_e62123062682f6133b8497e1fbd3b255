d87680994dad45a933b0e9379218b6dd
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = _default;

var _deepCyclicCopy = _interopRequireDefault(require('./deepCyclicCopy'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var BLACKLIST = new Set(['env', 'mainModule', '_events']);
var isWin32 = process.platform === 'win32';
var proto = Object.getPrototypeOf(process.env); // The "process.env" object has a bunch of particularities: first, it does not
// directly extend from Object; second, it converts any assigned value to a
// string; and third, it is case-insensitive in Windows. We use a proxy here to
// mimic it (see https://nodejs.org/api/process.html#process_process_env).

function createProcessEnv() {
  var real = Object.create(proto);
  var lookup = {};

  function deletePropertyWin32(_target, key) {
    for (var name in real) {
      if (real.hasOwnProperty(name)) {
        if (typeof key === 'string') {
          if (name.toLowerCase() === key.toLowerCase()) {
            delete real[name];
            delete lookup[name.toLowerCase()];
          }
        } else {
          if (key === name) {
            delete real[name];
            delete lookup[name];
          }
        }
      }
    }

    return true;
  }

  function deleteProperty(_target, key) {
    delete real[key];
    delete lookup[key];
    return true;
  }

  function getProperty(_target, key) {
    return real[key];
  }

  function getPropertyWin32(_target, key) {
    if (typeof key === 'string') {
      return lookup[key in proto ? key : key.toLowerCase()];
    } else {
      return real[key];
    }
  }

  var proxy = new Proxy(real, {
    deleteProperty: isWin32 ? deletePropertyWin32 : deleteProperty,
    get: isWin32 ? getPropertyWin32 : getProperty,
    set: function set(_target, key, value) {
      var strValue = '' + value;

      if (typeof key === 'string') {
        lookup[key.toLowerCase()] = strValue;
      }

      real[key] = strValue;
      return true;
    }
  });
  return Object.assign(proxy, process.env);
}

function _default() {
  var process = require('process');

  var newProcess = (0, _deepCyclicCopy["default"])(process, {
    blacklist: BLACKLIST,
    keepPrototype: true
  });

  try {
    // This fails on Node 12, but it's already set to 'process'
    newProcess[Symbol.toStringTag] = 'process';
  } catch (e) {
    // Make sure it's actually set instead of potentially ignoring errors
    if (newProcess[Symbol.toStringTag] !== 'process') {
      e.message = 'Unable to set toStringTag on process. Please open up an issue at https://github.com/facebook/jest\n\n' + e.message;
      throw e;
    }
  } // Sequentially execute all constructors over the object.


  var proto = process;

  while (proto = Object.getPrototypeOf(proto)) {
    if (typeof proto.constructor === 'function') {
      proto.constructor.call(newProcess);
    }
  }

  newProcess.env = createProcessEnv();

  newProcess.send = function () {};

  Object.defineProperty(newProcess, 'domain', {
    get: function get() {
      return process.domain;
    }
  });
  return newProcess;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVByb2Nlc3NPYmplY3QuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfZGVmYXVsdCIsIl9kZWVwQ3ljbGljQ29weSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIkJMQUNLTElTVCIsIlNldCIsImlzV2luMzIiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiZW52IiwiY3JlYXRlUHJvY2Vzc0VudiIsInJlYWwiLCJjcmVhdGUiLCJsb29rdXAiLCJkZWxldGVQcm9wZXJ0eVdpbjMyIiwiX3RhcmdldCIsImtleSIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsInRvTG93ZXJDYXNlIiwiZGVsZXRlUHJvcGVydHkiLCJnZXRQcm9wZXJ0eSIsImdldFByb3BlcnR5V2luMzIiLCJwcm94eSIsIlByb3h5IiwiZ2V0Iiwic2V0Iiwic3RyVmFsdWUiLCJhc3NpZ24iLCJuZXdQcm9jZXNzIiwiYmxhY2tsaXN0Iiwia2VlcFByb3RvdHlwZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiZSIsIm1lc3NhZ2UiLCJjb25zdHJ1Y3RvciIsImNhbGwiLCJzZW5kIiwiZG9tYWluIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sV0FBUCxHQUFrQkUsUUFBbEI7O0FBRUEsSUFBSUMsZUFBZSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGtCQUFELENBQVIsQ0FBNUM7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NFLEdBQWhDLEVBQXFDO0FBQ25DLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFDLGVB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SUFBQUEsR0FEMEMsaUJBQ3BDO0FBQ0osYUFBT3BCLE9BQU8sQ0FBQ2tDLE1BQWY7QUFDRDtBQUh5QyxHQUE1QztBQUtBLFNBQU9WLFVBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxudmFyIF9kZWVwQ3ljbGljQ29weSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgnLi9kZWVwQ3ljbGljQ29weScpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBCTEFDS0xJU1QgPSBuZXcgU2V0KFsnZW52JywgJ21haW5Nb2R1bGUnLCAnX2V2ZW50cyddKTtcbmNvbnN0IGlzV2luMzIgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInO1xuY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvY2Vzcy5lbnYpOyAvLyBUaGUgXCJwcm9jZXNzLmVudlwiIG9iamVjdCBoYXMgYSBidW5jaCBvZiBwYXJ0aWN1bGFyaXRpZXM6IGZpcnN0LCBpdCBkb2VzIG5vdFxuLy8gZGlyZWN0bHkgZXh0ZW5kIGZyb20gT2JqZWN0OyBzZWNvbmQsIGl0IGNvbnZlcnRzIGFueSBhc3NpZ25lZCB2YWx1ZSB0byBhXG4vLyBzdHJpbmc7IGFuZCB0aGlyZCwgaXQgaXMgY2FzZS1pbnNlbnNpdGl2ZSBpbiBXaW5kb3dzLiBXZSB1c2UgYSBwcm94eSBoZXJlIHRvXG4vLyBtaW1pYyBpdCAoc2VlIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NfcHJvY2Vzc19lbnYpLlxuXG5mdW5jdGlvbiBjcmVhdGVQcm9jZXNzRW52KCkge1xuICBjb25zdCByZWFsID0gT2JqZWN0LmNyZWF0ZShwcm90byk7XG4gIGNvbnN0IGxvb2t1cCA9IHt9O1xuXG4gIGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5V2luMzIoX3RhcmdldCwga2V5KSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHJlYWwpIHtcbiAgICAgIGlmIChyZWFsLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09IGtleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBkZWxldGUgcmVhbFtuYW1lXTtcbiAgICAgICAgICAgIGRlbGV0ZSBsb29rdXBbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgZGVsZXRlIHJlYWxbbmFtZV07XG4gICAgICAgICAgICBkZWxldGUgbG9va3VwW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkoX3RhcmdldCwga2V5KSB7XG4gICAgZGVsZXRlIHJlYWxba2V5XTtcbiAgICBkZWxldGUgbG9va3VwW2tleV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcm9wZXJ0eShfdGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gcmVhbFtrZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UHJvcGVydHlXaW4zMihfdGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBsb29rdXBba2V5IGluIHByb3RvID8ga2V5IDoga2V5LnRvTG93ZXJDYXNlKCldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVhbFtrZXldO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KHJlYWwsIHtcbiAgICBkZWxldGVQcm9wZXJ0eTogaXNXaW4zMiA/IGRlbGV0ZVByb3BlcnR5V2luMzIgOiBkZWxldGVQcm9wZXJ0eSxcbiAgICBnZXQ6IGlzV2luMzIgPyBnZXRQcm9wZXJ0eVdpbjMyIDogZ2V0UHJvcGVydHksXG5cbiAgICBzZXQoX3RhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RyVmFsdWUgPSAnJyArIHZhbHVlO1xuXG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbG9va3VwW2tleS50b0xvd2VyQ2FzZSgpXSA9IHN0clZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZWFsW2tleV0gPSBzdHJWYWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHByb3h5LCBwcm9jZXNzLmVudik7XG59XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICBjb25zdCBwcm9jZXNzID0gcmVxdWlyZSgncHJvY2VzcycpO1xuXG4gIGNvbnN0IG5ld1Byb2Nlc3MgPSAoMCwgX2RlZXBDeWNsaWNDb3B5LmRlZmF1bHQpKHByb2Nlc3MsIHtcbiAgICBibGFja2xpc3Q6IEJMQUNLTElTVCxcbiAgICBrZWVwUHJvdG90eXBlOiB0cnVlXG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBmYWlscyBvbiBOb2RlIDEyLCBidXQgaXQncyBhbHJlYWR5IHNldCB0byAncHJvY2VzcydcbiAgICBuZXdQcm9jZXNzW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAncHJvY2Vzcyc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBNYWtlIHN1cmUgaXQncyBhY3R1YWxseSBzZXQgaW5zdGVhZCBvZiBwb3RlbnRpYWxseSBpZ25vcmluZyBlcnJvcnNcbiAgICBpZiAobmV3UHJvY2Vzc1tTeW1ib2wudG9TdHJpbmdUYWddICE9PSAncHJvY2VzcycpIHtcbiAgICAgIGUubWVzc2FnZSA9XG4gICAgICAgICdVbmFibGUgdG8gc2V0IHRvU3RyaW5nVGFnIG9uIHByb2Nlc3MuIFBsZWFzZSBvcGVuIHVwIGFuIGlzc3VlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9qZXN0XFxuXFxuJyArXG4gICAgICAgIGUubWVzc2FnZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9IC8vIFNlcXVlbnRpYWxseSBleGVjdXRlIGFsbCBjb25zdHJ1Y3RvcnMgb3ZlciB0aGUgb2JqZWN0LlxuXG4gIGxldCBwcm90byA9IHByb2Nlc3M7XG5cbiAgd2hpbGUgKChwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90by5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IuY2FsbChuZXdQcm9jZXNzKTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9jZXNzLmVudiA9IGNyZWF0ZVByb2Nlc3NFbnYoKTtcblxuICBuZXdQcm9jZXNzLnNlbmQgPSAoKSA9PiB7fTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3UHJvY2VzcywgJ2RvbWFpbicsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5kb21haW47XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5ld1Byb2Nlc3M7XG59XG4iXX0=